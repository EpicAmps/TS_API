import { BaxandallPassiveDualBassCap } from './BaxandallPassiveDualBassCap';
import { testTonestack } from '../_testTonestack';

testTonestack(BaxandallPassiveDualBassCap, function (controlValues) {
  let {
    RIN, R1, R2, R3, R4, R5, RL, C1, C2, C3,
    RT: [RT2, RT1],
    RB: [RB2, RB1]
  } = this.processComponentValues(controlValues);

  RT2 += R5;
  RT1 += R4;

  // Transfer function denominator coefficients
  const denAIm = C1*C2*C3*RB1*RB2*RIN*RL*RT1*RT2 + C1*C2*C3*R2*RB1*RB2*RL*RT1*RT2
    + C1*C2*C3*R1*RB1*RB2*RL*RT1*RT2 + C1*C2*C3*R3*RB1*RB2*RIN*RT1*RT2
    + C1*C2*C3*R2*RB1*RB2*RIN*RT1*RT2 + C1*C2*C3*R2*R3*RB1*RB2*RT1*RT2
    + C1*C2*C3*R1*R3*RB1*RB2*RT1*RT2 + C1*C2*C3*R1*R2*RB1*RB2*RT1*RT2
    + C1*C2*C3*R3*RB1*RB2*RIN*RL*RT2 + C1*C2*C3*R1*RB1*RB2*RIN*RL*RT2
    + C1*C2*C3*R2*R3*RB1*RB2*RL*RT2 + C1*C2*C3*R1*R3*RB1*RB2*RL*RT2
    + C1*C2*C3*R1*R2*RB1*RB2*RL*RT2 + C1*C2*C3*R2*R3*RB1*RB2*RIN*RT2
    + C1*C2*C3*R1*R3*RB1*RB2*RIN*RT2 + C1*C2*C3*R1*R2*RB1*RB2*RIN*RT2
    + C1*C2*C3*R3*RB1*RB2*RIN*RL*RT1 + C1*C2*C3*R2*RB1*RB2*RIN*RL*RT1
    + C1*C2*C3*R2*R3*RB1*RB2*RL*RT1 + C1*C2*C3*R1*R3*RB1*RB2*RL*RT1
    + C1*C2*C3*R1*R2*RB1*RB2*RL*RT1 + C1*C2*C3*R2*R3*RB1*RB2*RIN*RL
    + C1*C2*C3*R1*R3*RB1*RB2*RIN*RL + C1*C2*C3*R1*R2*RB1*RB2*RIN*RL;

  const denBRe = C2*C3*RB2*RIN*RL*RT1*RT2 + C1*C3*RB1*RIN*RL*RT1*RT2
    + C2*C3*RB1*RB2*RL*RT1*RT2 + C1*C3*RB1*RB2*RL*RT1*RT2
    + C2*C3*R2*RB2*RL*RT1*RT2 + C2*C3*R1*RB2*RL*RT1*RT2 + C1*C3*R2*RB1*RL*RT1*RT2
    + C1*C3*R1*RB1*RL*RT1*RT2 + C1*C3*RB1*RB2*RIN*RT1*RT2
    + C2*C3*R3*RB2*RIN*RT1*RT2 + C2*C3*R2*RB2*RIN*RT1*RT2
    + C1*C3*R3*RB1*RIN*RT1*RT2 + C1*C3*R2*RB1*RIN*RT1*RT2
    + C2*C3*R3*RB1*RB2*RT1*RT2 + C1*C3*R3*RB1*RB2*RT1*RT2
    + C2*C3*R2*RB1*RB2*RT1*RT2 + C1*C3*R1*RB1*RB2*RT1*RT2
    + C2*C3*R2*R3*RB2*RT1*RT2 + C2*C3*R1*R3*RB2*RT1*RT2 + C2*C3*R1*R2*RB2*RT1*RT2
    + C1*C3*R2*R3*RB1*RT1*RT2 + C1*C3*R1*R3*RB1*RT1*RT2 + C1*C3*R1*R2*RB1*RT1*RT2
    + C2*C3*RB1*RB2*RIN*RL*RT2 + C1*C2*RB1*RB2*RIN*RL*RT2
    + C2*C3*R3*RB2*RIN*RL*RT2 + C2*C3*R1*RB2*RIN*RL*RT2 + C1*C3*R3*RB1*RIN*RL*RT2
    + C1*C3*R1*RB1*RIN*RL*RT2 + C2*C3*R3*RB1*RB2*RL*RT2 + C1*C3*R3*RB1*RB2*RL*RT2
    + C2*C3*R2*RB1*RB2*RL*RT2 + C1*C2*R2*RB1*RB2*RL*RT2 + C1*C3*R1*RB1*RB2*RL*RT2
    + C1*C2*R1*RB1*RB2*RL*RT2 + C2*C3*R2*R3*RB2*RL*RT2 + C2*C3*R1*R3*RB2*RL*RT2
    + C2*C3*R1*R2*RB2*RL*RT2 + C1*C3*R2*R3*RB1*RL*RT2 + C1*C3*R1*R3*RB1*RL*RT2
    + C1*C3*R1*R2*RB1*RL*RT2 + C2*C3*R3*RB1*RB2*RIN*RT2 + C1*C3*R3*RB1*RB2*RIN*RT2
    + C1*C2*R3*RB1*RB2*RIN*RT2 + C2*C3*R2*RB1*RB2*RIN*RT2
    + C1*C2*R2*RB1*RB2*RIN*RT2 + C1*C3*R1*RB1*RB2*RIN*RT2
    + C2*C3*R2*R3*RB2*RIN*RT2 + C2*C3*R1*R3*RB2*RIN*RT2 + C2*C3*R1*R2*RB2*RIN*RT2
    + C1*C3*R2*R3*RB1*RIN*RT2 + C1*C3*R1*R3*RB1*RIN*RT2 + C1*C3*R1*R2*RB1*RIN*RT2
    + C1*C2*R2*R3*RB1*RB2*RT2 + C1*C2*R1*R3*RB1*RB2*RT2 + C1*C2*R1*R2*RB1*RB2*RT2
    + C1*C3*RB1*RB2*RIN*RL*RT1 + C1*C2*RB1*RB2*RIN*RL*RT1
    + C2*C3*R3*RB2*RIN*RL*RT1 + C2*C3*R2*RB2*RIN*RL*RT1 + C1*C3*R3*RB1*RIN*RL*RT1
    + C1*C3*R2*RB1*RIN*RL*RT1 + C2*C3*R3*RB1*RB2*RL*RT1 + C1*C3*R3*RB1*RB2*RL*RT1
    + C2*C3*R2*RB1*RB2*RL*RT1 + C1*C2*R2*RB1*RB2*RL*RT1 + C1*C3*R1*RB1*RB2*RL*RT1
    + C1*C2*R1*RB1*RB2*RL*RT1 + C2*C3*R2*R3*RB2*RL*RT1 + C2*C3*R1*R3*RB2*RL*RT1
    + C2*C3*R1*R2*RB2*RL*RT1 + C1*C3*R2*R3*RB1*RL*RT1 + C1*C3*R1*R3*RB1*RL*RT1
    + C1*C3*R1*R2*RB1*RL*RT1 + C1*C2*R3*RB1*RB2*RIN*RT1 + C1*C2*R2*RB1*RB2*RIN*RT1
    + C1*C2*R2*R3*RB1*RB2*RT1 + C1*C2*R1*R3*RB1*RB2*RT1 + C1*C2*R1*R2*RB1*RB2*RT1
    + C2*C3*R3*RB1*RB2*RIN*RL + C1*C3*R3*RB1*RB2*RIN*RL + C2*C3*R2*RB1*RB2*RIN*RL
    + C1*C2*R2*RB1*RB2*RIN*RL + C1*C3*R1*RB1*RB2*RIN*RL + C1*C2*R1*RB1*RB2*RIN*RL
    + C2*C3*R2*R3*RB2*RIN*RL + C2*C3*R1*R3*RB2*RIN*RL + C2*C3*R1*R2*RB2*RIN*RL
    + C1*C3*R2*R3*RB1*RIN*RL + C1*C3*R1*R3*RB1*RIN*RL + C1*C3*R1*R2*RB1*RIN*RL
    + C1*C2*R2*R3*RB1*RB2*RIN + C1*C2*R1*R3*RB1*RB2*RIN + C1*C2*R1*R2*RB1*RB2*RIN;

  const denCIm = C3*RIN*RL*RT1*RT2 + C3*RB2*RL*RT1*RT2 + C3*RB1*RL*RT1*RT2
    + C3*R2*RL*RT1*RT2 + C3*R1*RL*RT1*RT2 + C3*RB2*RIN*RT1*RT2 + C3*R3*RIN*RT1*RT2
    + C3*R2*RIN*RT1*RT2 + C3*RB1*RB2*RT1*RT2 + C3*R3*RB2*RT1*RT2
    + C3*R1*RB2*RT1*RT2 + C3*R3*RB1*RT1*RT2 + C3*R2*RB1*RT1*RT2 + C3*R2*R3*RT1*RT2
    + C3*R1*R3*RT1*RT2 + C3*R1*R2*RT1*RT2 + C2*RB2*RIN*RL*RT2 + C3*RB1*RIN*RL*RT2
    + C1*RB1*RIN*RL*RT2 + C3*R3*RIN*RL*RT2 + C3*R1*RIN*RL*RT2 + C3*RB1*RB2*RL*RT2
    + C2*RB1*RB2*RL*RT2 + C1*RB1*RB2*RL*RT2 + C3*R3*RB2*RL*RT2 + C2*R2*RB2*RL*RT2
    + C3*R1*RB2*RL*RT2 + C2*R1*RB2*RL*RT2 + C3*R3*RB1*RL*RT2 + C3*R2*RB1*RL*RT2
    + C1*R2*RB1*RL*RT2 + C1*R1*RB1*RL*RT2 + C3*R2*R3*RL*RT2 + C3*R1*R3*RL*RT2
    + C3*R1*R2*RL*RT2 + C3*RB1*RB2*RIN*RT2 + C1*RB1*RB2*RIN*RT2
    + C3*R3*RB2*RIN*RT2 + C2*R3*RB2*RIN*RT2 + C2*R2*RB2*RIN*RT2
    + C3*R1*RB2*RIN*RT2 + C3*R3*RB1*RIN*RT2 + C1*R3*RB1*RIN*RT2
    + C3*R2*RB1*RIN*RT2 + C1*R2*RB1*RIN*RT2 + C3*R2*R3*RIN*RT2 + C3*R1*R3*RIN*RT2
    + C3*R1*R2*RIN*RT2 + C2*R3*RB1*RB2*RT2 + C1*R3*RB1*RB2*RT2 + C2*R2*RB1*RB2*RT2
    + C1*R1*RB1*RB2*RT2 + C2*R2*R3*RB2*RT2 + C2*R1*R3*RB2*RT2 + C2*R1*R2*RB2*RT2
    + C1*R2*R3*RB1*RT2 + C1*R1*R3*RB1*RT2 + C1*R1*R2*RB1*RT2 + C3*RB2*RIN*RL*RT1
    + C2*RB2*RIN*RL*RT1 + C1*RB1*RIN*RL*RT1 + C3*R3*RIN*RL*RT1 + C3*R2*RIN*RL*RT1
    + C3*RB1*RB2*RL*RT1 + C2*RB1*RB2*RL*RT1 + C1*RB1*RB2*RL*RT1 + C3*R3*RB2*RL*RT1
    + C2*R2*RB2*RL*RT1 + C3*R1*RB2*RL*RT1 + C2*R1*RB2*RL*RT1 + C3*R3*RB1*RL*RT1
    + C3*R2*RB1*RL*RT1 + C1*R2*RB1*RL*RT1 + C1*R1*RB1*RL*RT1 + C3*R2*R3*RL*RT1
    + C3*R1*R3*RL*RT1 + C3*R1*R2*RL*RT1 + C1*RB1*RB2*RIN*RT1 + C2*R3*RB2*RIN*RT1
    + C2*R2*RB2*RIN*RT1 + C1*R3*RB1*RIN*RT1 + C1*R2*RB1*RIN*RT1
    + C2*R3*RB1*RB2*RT1 + C1*R3*RB1*RB2*RT1 + C2*R2*RB1*RB2*RT1
    + C1*R1*RB1*RB2*RT1 + C2*R2*R3*RB2*RT1 + C2*R1*R3*RB2*RT1 + C2*R1*R2*RB2*RT1
    + C1*R2*R3*RB1*RT1 + C1*R1*R3*RB1*RT1 + C1*R1*R2*RB1*RT1 + C3*RB1*RB2*RIN*RL
    + C2*RB1*RB2*RIN*RL + C1*RB1*RB2*RIN*RL + C3*R3*RB2*RIN*RL + C2*R2*RB2*RIN*RL
    + C3*R1*RB2*RIN*RL + C2*R1*RB2*RIN*RL + C3*R3*RB1*RIN*RL + C3*R2*RB1*RIN*RL
    + C1*R2*RB1*RIN*RL + C1*R1*RB1*RIN*RL + C3*R2*R3*RIN*RL + C3*R1*R3*RIN*RL
    + C3*R1*R2*RIN*RL + C2*R3*RB1*RB2*RIN + C1*R3*RB1*RB2*RIN + C2*R2*RB1*RB2*RIN
    + C1*R1*RB1*RB2*RIN + C2*R2*R3*RB2*RIN + C2*R1*R3*RB2*RIN + C2*R1*R2*RB2*RIN
    + C1*R2*R3*RB1*RIN + C1*R1*R3*RB1*RIN + C1*R1*R2*RB1*RIN;

  const denDRe = RIN*RL*RT2 + RB2*RL*RT2 + RB1*RL*RT2 + R2*RL*RT2 + R1*RL*RT2
    + RB2*RIN*RT2 + R3*RIN*RT2 + R2*RIN*RT2 + RB1*RB2*RT2 + R3*RB2*RT2
    + R1*RB2*RT2 + R3*RB1*RT2 + R2*RB1*RT2 + R2*R3*RT2 + R1*R3*RT2 + R1*R2*RT2
    + RIN*RL*RT1 + RB2*RL*RT1 + RB1*RL*RT1 + R2*RL*RT1 + R1*RL*RT1 + RB2*RIN*RT1
    + R3*RIN*RT1 + R2*RIN*RT1 + RB1*RB2*RT1 + R3*RB2*RT1 + R1*RB2*RT1 + R3*RB1*RT1
    + R2*RB1*RT1 + R2*R3*RT1 + R1*R3*RT1 + R1*R2*RT1 + RB2*RIN*RL + RB1*RIN*RL
    + R2*RIN*RL + R1*RIN*RL + RB1*RB2*RIN + R3*RB2*RIN + R1*RB2*RIN + R3*RB1*RIN
    + R2*RB1*RIN + R2*R3*RIN + R1*R3*RIN + R1*R2*RIN;


  // Transfer function numerator coefficients
  const numAIm = C1*C2*C3*R2*RB1*RB2*RL*RT1*RT2 + C1*C2*C3*R2*R3*RB1*RB2*RL*RT2
    + C1*C2*C3*R1*R3*RB1*RB2*RL*RT2 + C1*C2*C3*R1*R2*RB1*RB2*RL*RT2;

  const numBRe = C1*C3*RB1*RB2*RL*RT1*RT2 + C2*C3*R2*RB2*RL*RT1*RT2
    + C1*C3*R2*RB1*RL*RT1*RT2 + C2*C3*R3*RB1*RB2*RL*RT2 + C1*C3*R3*RB1*RB2*RL*RT2
    + C2*C3*R2*RB1*RB2*RL*RT2 + C1*C2*R2*RB1*RB2*RL*RT2 + C1*C3*R1*RB1*RB2*RL*RT2
    + C2*C3*R2*R3*RB2*RL*RT2 + C2*C3*R1*R3*RB2*RL*RT2 + C2*C3*R1*R2*RB2*RL*RT2
    + C1*C3*R2*R3*RB1*RL*RT2 + C1*C3*R1*R3*RB1*RL*RT2 + C1*C3*R1*R2*RB1*RL*RT2
    + C1*C2*R2*RB1*RB2*RL*RT1;

  const numCIm = C3*RB2*RL*RT1*RT2 + C3*R2*RL*RT1*RT2 + C3*RB1*RB2*RL*RT2
    + C1*RB1*RB2*RL*RT2 + C3*R3*RB2*RL*RT2 + C2*R2*RB2*RL*RT2 + C3*R1*RB2*RL*RT2
    + C3*R3*RB1*RL*RT2 + C3*R2*RB1*RL*RT2 + C1*R2*RB1*RL*RT2 + C3*R2*R3*RL*RT2
    + C3*R1*R3*RL*RT2 + C3*R1*R2*RL*RT2 + C1*RB1*RB2*RL*RT1 + C2*R2*RB2*RL*RT1
    + C1*R2*RB1*RL*RT1;

  const numDRe = RB2*RL*RT2 + R2*RL*RT2 + RB2*RL*RT1 + R2*RL*RT1;

  return [
    [numDRe, numCIm, numBRe, numAIm],
    [denDRe, denCIm, denBRe, denAIm]
  ];
});