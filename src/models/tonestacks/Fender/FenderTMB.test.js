import { FenderTMB } from './FenderTMB';
import { testTonestack } from '../_testTonestack';

testTonestack(FenderTMB, function (controlValues) {
  const {
    RIN, R1, RL, C1, C2, C3,
    RT: [RT2, RT1],
    RM: [RM],
    RB: [RB]
  } = this.processComponentValues(controlValues);

  const denAIm = RB*RM*RT1*RT2*C1*C2*C3 + RB*RIN*RT1*RT2*C1*C2*C3 + R1*RB*RT1*RT2*C1*C2*C3 + RB*RL*RM*RT2*C1*C2*C3
    + RB*RIN*RM*RT2*C1*C2*C3 + RB*RIN*RL*RT2*C1*C2*C3 + R1*RB*RL*RT2*C1*C2*C3 + R1*RB*RIN*RT2*C1*C2*C3
    + RB*RL*RM*RT1*C1*C2*C3 + RB*RIN*RM*RT1*C1*C2*C3 + R1*RB*RM*RT1*C1*C2*C3 + RB*RIN*RL*RT1*C1*C2*C3
    + R1*RB*RL*RT1*C1*C2*C3 + R1*RB*RL*RM*C1*C2*C3 + R1*RB*RIN*RM*C1*C2*C3 + R1*RB*RIN*RL*C1*C2*C3;

  const denBRe = RM*RT1*RT2*C1*C2 + RIN*RT1*RT2*C1*C2 + RB*RT1*RT2*C1*C2 + R1*RT1*RT2*C1*C2 + RL*RM*RT2*C1*C2 + RIN*RM*RT2*C1*C2
    + RIN*RL*RT2*C1*C2 + RB*RL*RT2*C1*C2 + R1*RL*RT2*C1*C2 + RB*RIN*RT2*C1*C2 + R1*RIN*RT2*C1*C2 + RL*RM*RT1*C1*C2
    + RIN*RM*RT1*C1*C2 + R1*RM*RT1*C1*C2 + RIN*RL*RT1*C1*C2 + RB*RL*RT1*C1*C2 + R1*RL*RT1*C1*C2 + RB*RIN*RT1*C1*C2
    + R1*RB*RT1*C1*C2 + R1*RL*RM*C1*C2 + R1*RIN*RM*C1*C2 + R1*RIN*RL*C1*C2 + R1*RB*RL*C1*C2 + R1*RB*RIN*C1*C2
    + RB*RM*RT2*C2*C3 + RB*RIN*RT2*C2*C3 + R1*RB*RT2*C2*C3 + RB*RL*RM*C2*C3 + RB*RIN*RM*C2*C3 + R1*RB*RM*C2*C3 + RB*RIN*RL*C2*C3
    + R1*RB*RL*C2*C3 + RM*RT1*RT2*C1*C3 + RIN*RT1*RT2*C1*C3 + R1*RT1*RT2*C1*C3 + R1*RB*RIN*C1*C3 + R1*RB*RL*C1*C3
    + RL*RM*RT2*C1*C3 + RIN*RM*RT2*C1*C3 + RIN*RL*RT2*C1*C3 + R1*RL*RT2*C1*C3 + R1*RIN*RT2*C1*C3 + RL*RM*RT1*C1*C3
    + RIN*RM*RT1*C1*C3 + RB*RM*RT1*C1*C3 + R1*RM*RT1*C1*C3 + RIN*RL*RT1*C1*C3 + R1*RL*RT1*C1*C3 + RB*RIN*RT1*C1*C3
    + R1*RB*RT1*C1*C3 + RB*RL*RM*C1*C3 + R1*RL*RM*C1*C3 + RB*RIN*RM*C1*C3 + R1*RIN*RM*C1*C3 + RB*RIN*RL*C1*C3 + R1*RIN*RL*C1*C3;

  const denCIm = RM*RT2*C2 + RIN*RT2*C2 + RB*RT2*C2 + R1*RT2*C2 + RL*RM*C2 + RIN*RM*C2 + R1*RM*C2 + RIN*RL*C2 + RB*RL*C2
    + R1*RL*C2 + RB*RIN*C2 + R1*RB*C2 + RT1*RT2*C1 + RL*RT2*C1 + RIN*RT2*C1 + RM*RT1*C1 + RL*RT1*C1 + RB*RT1*C1 + RL*RM*C1
    + RIN*RM*C1 + RIN*RL*C1 + RB*RL*C1 + RB*RIN*C1 + RM*RT2*C3 + RIN*RT2*C3 + R1*RT2*C3 + RL*RM*C3
    + RIN*RM*C3 + RB*RM*C3 + R1*RM*C3 + RIN*RL*C3 + R1*RL*C3 + RB*RIN*C3 + R1*RB*C3;

  const denDRe = RT2 + RM + RL + RB;

  const numAIm = C1*C2*C3*RB*RL*RM*RT2 + C1*C2*C3*R1*RB*RL*RT2 + C1*C2*C3*RB*RL*RM*RT1 + C1*C2*C3*R1*RB*RL*RM;

  const numBRe = C1*C3*RL*RM*RT2 + C1*C2*RL*RM*RT2 + C1*C2*RB*RL*RT2 + C1*C3*R1*RL*RT2
    + C1*C2*R1*RL*RT2 + C1*C3*RL*RM*RT1 + C1*C2*RL*RM*RT1 + C1*C2*RB*RL*RT1
    + C2*C3*RB*RL*RM + C1*C3*RB*RL*RM + C1*C3*R1*RL*RM + C1*C2*R1*RL*RM
    + C1*C3*R1*RB*RL + C1*C2*R1*RB*RL;

  const numCIm = C1*RL*RT2 + C3*RL*RM + C2*RL*RM + C1*RL*RM + C2*RB*RL + C1*RB*RL;

  const numDRe = 0;

  return [
    [numDRe, numCIm, numBRe, numAIm],
    [denDRe, denCIm, denBRe, denAIm]
  ];
});