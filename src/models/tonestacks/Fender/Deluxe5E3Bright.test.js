import { Deluxe5E3Bright } from './Deluxe5E3Bright';
import { testTonestack } from '../_testTonestack';

testTonestack(Deluxe5E3Bright, function (controlValues) {
  const {
    RINN, RINB, RL, CINN, C1, C2, CINB,
    RT: [RT2, RT1],
    RVN: [RVN2, RVN1],
    RVB: [RVB2, RVB1]
  } = this.processComponentValues(controlValues);

  const a0 = 0;
  const a1 = CINB*RL*RVB2*RVN1 + CINB*RL*RVB2*RVN2;
  const a2 = CINN*CINB*RINN*RL*RVB2*RVN1 + C2*CINB*RL*RT1*RVB2*RVN1 + C1*CINB*RL*RT2*RVB2*RVN1 + C2*CINB*RL*RVB1*RVB2*RVN1 + CINN*CINB*RINN*RL*RVB2*RVN2 + C2*CINB*RL*RT1*RVB2*RVN2 + C1*CINB*RL*RT2*RVB2*RVN2 + C2*CINB*RL*RVB1*RVB2*RVN2 + CINN*CINB*RL*RVB2*RVN1*RVN2;
  const a3 = CINN*C2*CINB*RINN*RL*RT1*RVB2*RVN1 + CINN*C1*CINB*RINN*RL*RT2*RVB2*RVN1 + C1*C2*CINB*RL*RT1*RT2*RVB2*RVN1 + CINN*C2*CINB*RINN*RL*RVB1*RVB2*RVN1 + C1*C2*CINB*RL*RT2*RVB1*RVB2*RVN1 + CINN*C2*CINB*RINN*RL*RT1*RVB2*RVN2 + CINN*C1*CINB*RINN*RL*RT2*RVB2*RVN2 + C1*C2*CINB*RL*RT1*RT2*RVB2*RVN2 + CINN*C2*CINB*RINN*RL*RVB1*RVB2*RVN2 + C1*C2*CINB*RL*RT2*RVB1*RVB2*RVN2 + CINN*C2*CINB*RL*RT1*RVB2*RVN1*RVN2 + CINN*C1*CINB*RL*RT2*RVB2*RVN1*RVN2 + CINN*C2*CINB*RL*RVB1*RVB2*RVN1*RVN2;
  const a4 = CINN*C1*C2*CINB*RINN*RL*RT1*RT2*RVB2*RVN1 + CINN*C1*C2*CINB*RINN*RL*RT2*RVB1*RVB2*RVN1 + CINN*C1*C2*CINB*RINN*RL*RT1*RT2*RVB2*RVN2 + CINN*C1*C2*CINB*RINN*RL*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RL*RT1*RT2*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RL*RT2*RVB1*RVB2*RVN1*RVN2;

  const b0 = RL*RVB1 + RL*RVB2 + RL*RVN1 + RVB1*RVN1 + RVB2*RVN1 + RL*RVN2 + RVB1*RVN2 + RVB2*RVN2;
  const b1 = CINB*RINB*RL*RVB1 + CINN*RINN*RL*RVB1 + C2*RL*RT1*RVB1 + C1*RL*RT2*RVB1 + CINB*RINB*RL*RVB2 + CINN*RINN*RL*RVB2 + C2*RL*RT1*RVB2 + C1*RL*RT2*RVB2 + C2*RL*RVB1*RVB2 + CINB*RL*RVB1*RVB2 + CINB*RINB*RL*RVN1 + CINN*RINN*RL*RVN1 + C2*RL*RT1*RVN1 + C1*RL*RT2*RVN1 + CINB*RINB*RVB1*RVN1 + CINN*RINN*RVB1*RVN1 + C1*RL*RVB1*RVN1 + C2*RL*RVB1*RVN1 + C2*RT1*RVB1*RVN1 + C1*RT2*RVB1*RVN1 + CINB*RINB*RVB2*RVN1 + CINN*RINN*RVB2*RVN1 + C1*RL*RVB2*RVN1 + CINB*RL*RVB2*RVN1 + C2*RT1*RVB2*RVN1 + C1*RT2*RVB2*RVN1 + C2*RVB1*RVB2*RVN1 + CINB*RVB1*RVB2*RVN1 + CINB*RINB*RL*RVN2 + CINN*RINN*RL*RVN2 + C2*RL*RT1*RVN2 + C1*RL*RT2*RVN2 + CINB*RINB*RVB1*RVN2 + CINN*RINN*RVB1*RVN2 + CINN*RL*RVB1*RVN2 + C1*RL*RVB1*RVN2 + C2*RL*RVB1*RVN2 + C2*RT1*RVB1*RVN2 + C1*RT2*RVB1*RVN2 + CINB*RINB*RVB2*RVN2 + CINN*RINN*RVB2*RVN2 + CINN*RL*RVB2*RVN2 + C1*RL*RVB2*RVN2 + CINB*RL*RVB2*RVN2 + C2*RT1*RVB2*RVN2 + C1*RT2*RVB2*RVN2 + C2*RVB1*RVB2*RVN2 + CINB*RVB1*RVB2*RVN2 + CINN*RL*RVN1*RVN2 + CINN*RVB1*RVN1*RVN2 + CINN*RVB2*RVN1*RVN2;
  const b2 = CINN*CINB*RINB*RINN*RL*RVB1 + C2*CINB*RINB*RL*RT1*RVB1 + CINN*C2*RINN*RL*RT1*RVB1 + C1*CINB*RINB*RL*RT2*RVB1 + CINN*C1*RINN*RL*RT2*RVB1 + C1*C2*RL*RT1*RT2*RVB1 + CINN*CINB*RINB*RINN*RL*RVB2 + C2*CINB*RINB*RL*RT1*RVB2 + CINN*C2*RINN*RL*RT1*RVB2 + C1*CINB*RINB*RL*RT2*RVB2 + CINN*C1*RINN*RL*RT2*RVB2 + C1*C2*RL*RT1*RT2*RVB2 + C2*CINB*RINB*RL*RVB1*RVB2 + CINN*C2*RINN*RL*RVB1*RVB2 + CINN*CINB*RINN*RL*RVB1*RVB2 + C2*CINB*RL*RT1*RVB1*RVB2 + C1*C2*RL*RT2*RVB1*RVB2 + C1*CINB*RL*RT2*RVB1*RVB2 + CINN*CINB*RINB*RINN*RL*RVN1 + C2*CINB*RINB*RL*RT1*RVN1 + CINN*C2*RINN*RL*RT1*RVN1 + C1*CINB*RINB*RL*RT2*RVN1 + CINN*C1*RINN*RL*RT2*RVN1 + C1*C2*RL*RT1*RT2*RVN1 + CINN*CINB*RINB*RINN*RVB1*RVN1 + C1*CINB*RINB*RL*RVB1*RVN1 + C2*CINB*RINB*RL*RVB1*RVN1 + CINN*C1*RINN*RL*RVB1*RVN1 + CINN*C2*RINN*RL*RVB1*RVN1 + C2*CINB*RINB*RT1*RVB1*RVN1 + CINN*C2*RINN*RT1*RVB1*RVN1 + C1*C2*RL*RT1*RVB1*RVN1 + C1*CINB*RINB*RT2*RVB1*RVN1 + CINN*C1*RINN*RT2*RVB1*RVN1 + C1*C2*RL*RT2*RVB1*RVN1 + C1*C2*RT1*RT2*RVB1*RVN1 + CINN*CINB*RINB*RINN*RVB2*RVN1 + C1*CINB*RINB*RL*RVB2*RVN1 + CINN*C1*RINN*RL*RVB2*RVN1 + CINN*CINB*RINN*RL*RVB2*RVN1 + C2*CINB*RINB*RT1*RVB2*RVN1 + CINN*C2*RINN*RT1*RVB2*RVN1 + C1*C2*RL*RT1*RVB2*RVN1 + C2*CINB*RL*RT1*RVB2*RVN1 + C1*CINB*RINB*RT2*RVB2*RVN1 + CINN*C1*RINN*RT2*RVB2*RVN1 + C1*CINB*RL*RT2*RVB2*RVN1 + C1*C2*RT1*RT2*RVB2*RVN1 + C2*CINB*RINB*RVB1*RVB2*RVN1 + CINN*C2*RINN*RVB1*RVB2*RVN1 + CINN*CINB*RINN*RVB1*RVB2*RVN1 + C1*C2*RL*RVB1*RVB2*RVN1 + C1*CINB*RL*RVB1*RVB2*RVN1 + C2*CINB*RL*RVB1*RVB2*RVN1 + C2*CINB*RT1*RVB1*RVB2*RVN1 + C1*C2*RT2*RVB1*RVB2*RVN1 + C1*CINB*RT2*RVB1*RVB2*RVN1 + CINN*CINB*RINB*RINN*RL*RVN2 + C2*CINB*RINB*RL*RT1*RVN2 + CINN*C2*RINN*RL*RT1*RVN2 + C1*CINB*RINB*RL*RT2*RVN2 + CINN*C1*RINN*RL*RT2*RVN2 + C1*C2*RL*RT1*RT2*RVN2 + CINN*CINB*RINB*RINN*RVB1*RVN2 + CINN*CINB*RINB*RL*RVB1*RVN2 + C1*CINB*RINB*RL*RVB1*RVN2 + C2*CINB*RINB*RL*RVB1*RVN2 + CINN*C1*RINN*RL*RVB1*RVN2 + CINN*C2*RINN*RL*RVB1*RVN2 + C2*CINB*RINB*RT1*RVB1*RVN2 + CINN*C2*RINN*RT1*RVB1*RVN2 + CINN*C2*RL*RT1*RVB1*RVN2 + C1*C2*RL*RT1*RVB1*RVN2 + C1*CINB*RINB*RT2*RVB1*RVN2 + CINN*C1*RINN*RT2*RVB1*RVN2 + CINN*C1*RL*RT2*RVB1*RVN2 + C1*C2*RL*RT2*RVB1*RVN2 + C1*C2*RT1*RT2*RVB1*RVN2 + CINN*CINB*RINB*RINN*RVB2*RVN2 + CINN*CINB*RINB*RL*RVB2*RVN2 + C1*CINB*RINB*RL*RVB2*RVN2 + CINN*C1*RINN*RL*RVB2*RVN2 + CINN*CINB*RINN*RL*RVB2*RVN2 + C2*CINB*RINB*RT1*RVB2*RVN2 + CINN*C2*RINN*RT1*RVB2*RVN2 + CINN*C2*RL*RT1*RVB2*RVN2 + C1*C2*RL*RT1*RVB2*RVN2 + C2*CINB*RL*RT1*RVB2*RVN2 + C1*CINB*RINB*RT2*RVB2*RVN2 + CINN*C1*RINN*RT2*RVB2*RVN2 + CINN*C1*RL*RT2*RVB2*RVN2 + C1*CINB*RL*RT2*RVB2*RVN2 + C1*C2*RT1*RT2*RVB2*RVN2 + C2*CINB*RINB*RVB1*RVB2*RVN2 + CINN*C2*RINN*RVB1*RVB2*RVN2 + CINN*CINB*RINN*RVB1*RVB2*RVN2 + CINN*C2*RL*RVB1*RVB2*RVN2 + C1*C2*RL*RVB1*RVB2*RVN2 + CINN*CINB*RL*RVB1*RVB2*RVN2 + C1*CINB*RL*RVB1*RVB2*RVN2 + C2*CINB*RL*RVB1*RVB2*RVN2 + C2*CINB*RT1*RVB1*RVB2*RVN2 + C1*C2*RT2*RVB1*RVB2*RVN2 + C1*CINB*RT2*RVB1*RVB2*RVN2 + CINN*CINB*RINB*RL*RVN1*RVN2 + CINN*C2*RL*RT1*RVN1*RVN2 + CINN*C1*RL*RT2*RVN1*RVN2 + CINN*CINB*RINB*RVB1*RVN1*RVN2 + CINN*C1*RL*RVB1*RVN1*RVN2 + CINN*C2*RL*RVB1*RVN1*RVN2 + CINN*C2*RT1*RVB1*RVN1*RVN2 + CINN*C1*RT2*RVB1*RVN1*RVN2 + CINN*CINB*RINB*RVB2*RVN1*RVN2 + CINN*C1*RL*RVB2*RVN1*RVN2 + CINN*CINB*RL*RVB2*RVN1*RVN2 + CINN*C2*RT1*RVB2*RVN1*RVN2 + CINN*C1*RT2*RVB2*RVN1*RVN2 + CINN*C2*RVB1*RVB2*RVN1*RVN2 + CINN*CINB*RVB1*RVB2*RVN1*RVN2;
  const b3 = CINN*C2*CINB*RINB*RINN*RL*RT1*RVB1 + CINN*C1*CINB*RINB*RINN*RL*RT2*RVB1 + C1*C2*CINB*RINB*RL*RT1*RT2*RVB1 + CINN*C1*C2*RINN*RL*RT1*RT2*RVB1 + CINN*C2*CINB*RINB*RINN*RL*RT1*RVB2 + CINN*C1*CINB*RINB*RINN*RL*RT2*RVB2 + C1*C2*CINB*RINB*RL*RT1*RT2*RVB2 + CINN*C1*C2*RINN*RL*RT1*RT2*RVB2 + CINN*C2*CINB*RINB*RINN*RL*RVB1*RVB2 + CINN*C2*CINB*RINN*RL*RT1*RVB1*RVB2 + C1*C2*CINB*RINB*RL*RT2*RVB1*RVB2 + CINN*C1*C2*RINN*RL*RT2*RVB1*RVB2 + CINN*C1*CINB*RINN*RL*RT2*RVB1*RVB2 + C1*C2*CINB*RL*RT1*RT2*RVB1*RVB2 + CINN*C2*CINB*RINB*RINN*RL*RT1*RVN1 + CINN*C1*CINB*RINB*RINN*RL*RT2*RVN1 + C1*C2*CINB*RINB*RL*RT1*RT2*RVN1 + CINN*C1*C2*RINN*RL*RT1*RT2*RVN1 + CINN*C1*CINB*RINB*RINN*RL*RVB1*RVN1 + CINN*C2*CINB*RINB*RINN*RL*RVB1*RVN1 + CINN*C2*CINB*RINB*RINN*RT1*RVB1*RVN1 + C1*C2*CINB*RINB*RL*RT1*RVB1*RVN1 + CINN*C1*C2*RINN*RL*RT1*RVB1*RVN1 + CINN*C1*CINB*RINB*RINN*RT2*RVB1*RVN1 + C1*C2*CINB*RINB*RL*RT2*RVB1*RVN1 + CINN*C1*C2*RINN*RL*RT2*RVB1*RVN1 + C1*C2*CINB*RINB*RT1*RT2*RVB1*RVN1 + CINN*C1*C2*RINN*RT1*RT2*RVB1*RVN1 + CINN*C1*CINB*RINB*RINN*RL*RVB2*RVN1 + CINN*C2*CINB*RINB*RINN*RT1*RVB2*RVN1 + C1*C2*CINB*RINB*RL*RT1*RVB2*RVN1 + CINN*C1*C2*RINN*RL*RT1*RVB2*RVN1 + CINN*C2*CINB*RINN*RL*RT1*RVB2*RVN1 + CINN*C1*CINB*RINB*RINN*RT2*RVB2*RVN1 + CINN*C1*CINB*RINN*RL*RT2*RVB2*RVN1 + C1*C2*CINB*RINB*RT1*RT2*RVB2*RVN1 + CINN*C1*C2*RINN*RT1*RT2*RVB2*RVN1 + C1*C2*CINB*RL*RT1*RT2*RVB2*RVN1 + CINN*C2*CINB*RINB*RINN*RVB1*RVB2*RVN1 + C1*C2*CINB*RINB*RL*RVB1*RVB2*RVN1 + CINN*C1*C2*RINN*RL*RVB1*RVB2*RVN1 + CINN*C1*CINB*RINN*RL*RVB1*RVB2*RVN1 + CINN*C2*CINB*RINN*RL*RVB1*RVB2*RVN1 + CINN*C2*CINB*RINN*RT1*RVB1*RVB2*RVN1 + C1*C2*CINB*RL*RT1*RVB1*RVB2*RVN1 + C1*C2*CINB*RINB*RT2*RVB1*RVB2*RVN1 + CINN*C1*C2*RINN*RT2*RVB1*RVB2*RVN1 + CINN*C1*CINB*RINN*RT2*RVB1*RVB2*RVN1 + C1*C2*CINB*RL*RT2*RVB1*RVB2*RVN1 + C1*C2*CINB*RT1*RT2*RVB1*RVB2*RVN1 + CINN*C2*CINB*RINB*RINN*RL*RT1*RVN2 + CINN*C1*CINB*RINB*RINN*RL*RT2*RVN2 + C1*C2*CINB*RINB*RL*RT1*RT2*RVN2 + CINN*C1*C2*RINN*RL*RT1*RT2*RVN2 + CINN*C1*CINB*RINB*RINN*RL*RVB1*RVN2 + CINN*C2*CINB*RINB*RINN*RL*RVB1*RVN2 + CINN*C2*CINB*RINB*RINN*RT1*RVB1*RVN2 + CINN*C2*CINB*RINB*RL*RT1*RVB1*RVN2 + C1*C2*CINB*RINB*RL*RT1*RVB1*RVN2 + CINN*C1*C2*RINN*RL*RT1*RVB1*RVN2 + CINN*C1*CINB*RINB*RINN*RT2*RVB1*RVN2 + CINN*C1*CINB*RINB*RL*RT2*RVB1*RVN2 + C1*C2*CINB*RINB*RL*RT2*RVB1*RVN2 + CINN*C1*C2*RINN*RL*RT2*RVB1*RVN2 + C1*C2*CINB*RINB*RT1*RT2*RVB1*RVN2 + CINN*C1*C2*RINN*RT1*RT2*RVB1*RVN2 + CINN*C1*C2*RL*RT1*RT2*RVB1*RVN2 + CINN*C1*CINB*RINB*RINN*RL*RVB2*RVN2 + CINN*C2*CINB*RINB*RINN*RT1*RVB2*RVN2 + CINN*C2*CINB*RINB*RL*RT1*RVB2*RVN2 + C1*C2*CINB*RINB*RL*RT1*RVB2*RVN2 + CINN*C1*C2*RINN*RL*RT1*RVB2*RVN2 + CINN*C2*CINB*RINN*RL*RT1*RVB2*RVN2 + CINN*C1*CINB*RINB*RINN*RT2*RVB2*RVN2 + CINN*C1*CINB*RINB*RL*RT2*RVB2*RVN2 + CINN*C1*CINB*RINN*RL*RT2*RVB2*RVN2 + C1*C2*CINB*RINB*RT1*RT2*RVB2*RVN2 + CINN*C1*C2*RINN*RT1*RT2*RVB2*RVN2 + CINN*C1*C2*RL*RT1*RT2*RVB2*RVN2 + C1*C2*CINB*RL*RT1*RT2*RVB2*RVN2 + CINN*C2*CINB*RINB*RINN*RVB1*RVB2*RVN2 + CINN*C2*CINB*RINB*RL*RVB1*RVB2*RVN2 + C1*C2*CINB*RINB*RL*RVB1*RVB2*RVN2 + CINN*C1*C2*RINN*RL*RVB1*RVB2*RVN2 + CINN*C1*CINB*RINN*RL*RVB1*RVB2*RVN2 + CINN*C2*CINB*RINN*RL*RVB1*RVB2*RVN2 + CINN*C2*CINB*RINN*RT1*RVB1*RVB2*RVN2 + CINN*C2*CINB*RL*RT1*RVB1*RVB2*RVN2 + C1*C2*CINB*RL*RT1*RVB1*RVB2*RVN2 + C1*C2*CINB*RINB*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*RINN*RT2*RVB1*RVB2*RVN2 + CINN*C1*CINB*RINN*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*RL*RT2*RVB1*RVB2*RVN2 + CINN*C1*CINB*RL*RT2*RVB1*RVB2*RVN2 + C1*C2*CINB*RL*RT2*RVB1*RVB2*RVN2 + C1*C2*CINB*RT1*RT2*RVB1*RVB2*RVN2 + CINN*C2*CINB*RINB*RL*RT1*RVN1*RVN2 + CINN*C1*CINB*RINB*RL*RT2*RVN1*RVN2 + CINN*C1*C2*RL*RT1*RT2*RVN1*RVN2 + CINN*C1*CINB*RINB*RL*RVB1*RVN1*RVN2 + CINN*C2*CINB*RINB*RL*RVB1*RVN1*RVN2 + CINN*C2*CINB*RINB*RT1*RVB1*RVN1*RVN2 + CINN*C1*C2*RL*RT1*RVB1*RVN1*RVN2 + CINN*C1*CINB*RINB*RT2*RVB1*RVN1*RVN2 + CINN*C1*C2*RL*RT2*RVB1*RVN1*RVN2 + CINN*C1*C2*RT1*RT2*RVB1*RVN1*RVN2 + CINN*C1*CINB*RINB*RL*RVB2*RVN1*RVN2 + CINN*C2*CINB*RINB*RT1*RVB2*RVN1*RVN2 + CINN*C1*C2*RL*RT1*RVB2*RVN1*RVN2 + CINN*C2*CINB*RL*RT1*RVB2*RVN1*RVN2 + CINN*C1*CINB*RINB*RT2*RVB2*RVN1*RVN2 + CINN*C1*CINB*RL*RT2*RVB2*RVN1*RVN2 + CINN*C1*C2*RT1*RT2*RVB2*RVN1*RVN2 + CINN*C2*CINB*RINB*RVB1*RVB2*RVN1*RVN2 + CINN*C1*C2*RL*RVB1*RVB2*RVN1*RVN2 + CINN*C1*CINB*RL*RVB1*RVB2*RVN1*RVN2 + CINN*C2*CINB*RL*RVB1*RVB2*RVN1*RVN2 + CINN*C2*CINB*RT1*RVB1*RVB2*RVN1*RVN2 + CINN*C1*C2*RT2*RVB1*RVB2*RVN1*RVN2 + CINN*C1*CINB*RT2*RVB1*RVB2*RVN1*RVN2;
  const b4 = CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RT2*RVB1 + CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RT2*RVB2 + CINN*C1*C2*CINB*RINB*RINN*RL*RT2*RVB1*RVB2 + CINN*C1*C2*CINB*RINN*RL*RT1*RT2*RVB1*RVB2 + CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RT2*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RVB1*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RL*RT2*RVB1*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RT1*RT2*RVB1*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RVB2*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RT1*RT2*RVB2*RVN1 + CINN*C1*C2*CINB*RINN*RL*RT1*RT2*RVB2*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RL*RVB1*RVB2*RVN1 + CINN*C1*C2*CINB*RINN*RL*RT1*RVB1*RVB2*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RT2*RVB1*RVB2*RVN1 + CINN*C1*C2*CINB*RINN*RL*RT2*RVB1*RVB2*RVN1 + CINN*C1*C2*CINB*RINN*RT1*RT2*RVB1*RVB2*RVN1 + CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RT2*RVN2 + CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RVB1*RVN2 + CINN*C1*C2*CINB*RINB*RINN*RL*RT2*RVB1*RVN2 + CINN*C1*C2*CINB*RINB*RINN*RT1*RT2*RVB1*RVN2 + CINN*C1*C2*CINB*RINB*RL*RT1*RT2*RVB1*RVN2 + CINN*C1*C2*CINB*RINB*RINN*RL*RT1*RVB2*RVN2 + CINN*C1*C2*CINB*RINB*RINN*RT1*RT2*RVB2*RVN2 + CINN*C1*C2*CINB*RINB*RL*RT1*RT2*RVB2*RVN2 + CINN*C1*C2*CINB*RINN*RL*RT1*RT2*RVB2*RVN2 + CINN*C1*C2*CINB*RINB*RINN*RL*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RINN*RL*RT1*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RINB*RINN*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RINB*RL*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RINN*RL*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RINN*RT1*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RL*RT1*RT2*RVB1*RVB2*RVN2 + CINN*C1*C2*CINB*RINB*RL*RT1*RT2*RVN1*RVN2 + CINN*C1*C2*CINB*RINB*RL*RT1*RVB1*RVN1*RVN2 + CINN*C1*C2*CINB*RINB*RL*RT2*RVB1*RVN1*RVN2 + CINN*C1*C2*CINB*RINB*RT1*RT2*RVB1*RVN1*RVN2 + CINN*C1*C2*CINB*RINB*RL*RT1*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RINB*RT1*RT2*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RL*RT1*RT2*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RINB*RL*RVB1*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RL*RT1*RVB1*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RINB*RT2*RVB1*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RL*RT2*RVB1*RVB2*RVN1*RVN2 + CINN*C1*C2*CINB*RT1*RT2*RVB1*RVB2*RVN1*RVN2;

  return [
    [a0, a1, a2, a3, a4],
    [b0, b1, b2, b3, b4]
  ];
});