import { Bassman5F6A } from './Bassman5F6A';
import { testTonestack } from '../_testTonestack';

testTonestack(Bassman5F6A, function (controlValues) {
  const {
    RIN, R1, RL, C1, C2, C3,
    RT: [RT2, RT1],
    RM: [RM2, RM1],
    RB: [RB]
  } = this.processComponentValues(controlValues);

  // Transfer function denominator coefficients
  const denAIm = C1*C2*C3*RM1*RM2*RT1*RT2 + C1*C2*C3*RB*RM2*RT1*RT2
    + C1*C2*C3*RIN*RM1*RT1*RT2 + C1*C2*C3*R1*RM1*RT1*RT2 + C1*C2*C3*RB*RIN*RT1*RT2
    + C1*C2*C3*R1*RB*RT1*RT2 + C1*C2*C3*RL*RM1*RM2*RT2 + C1*C2*C3*RIN*RM1*RM2*RT2
    + C1*C2*C3*RB*RL*RM2*RT2 + C1*C2*C3*RB*RIN*RM2*RT2 + C1*C2*C3*RIN*RL*RM1*RT2
    + C1*C2*C3*R1*RL*RM1*RT2 + C1*C2*C3*R1*RIN*RM1*RT2 + C1*C2*C3*RB*RIN*RL*RT2
    + C1*C2*C3*R1*RB*RL*RT2 + C1*C2*C3*R1*RB*RIN*RT2 + C1*C2*C3*RL*RM1*RM2*RT1
    + C1*C2*C3*RIN*RM1*RM2*RT1 + C1*C2*C3*R1*RM1*RM2*RT1 + C1*C2*C3*RB*RL*RM2*RT1
    + C1*C2*C3*RB*RIN*RM2*RT1 + C1*C2*C3*R1*RB*RM2*RT1 + C1*C2*C3*RIN*RL*RM1*RT1
    + C1*C2*C3*R1*RL*RM1*RT1 + C1*C2*C3*RB*RIN*RL*RT1 + C1*C2*C3*R1*RB*RL*RT1
    + C1*C2*C3*R1*RL*RM1*RM2 + C1*C2*C3*R1*RIN*RM1*RM2 + C1*C2*C3*R1*RB*RL*RM2
    + C1*C2*C3*R1*RB*RIN*RM2 + C1*C2*C3*R1*RIN*RL*RM1 + C1*C2*C3*R1*RB*RIN*RL;

  const denBRe = C1*C3*RM2*RT1*RT2 + C1*C2*RM2*RT1*RT2 + C1*C2*RM1*RT1*RT2
    + C1*C3*RIN*RT1*RT2 + C1*C2*RIN*RT1*RT2 + C1*C2*RB*RT1*RT2 + C1*C3*R1*RT1*RT2
    + C1*C2*R1*RT1*RT2 + C2*C3*RM1*RM2*RT2 + C1*C3*RL*RM2*RT2 + C1*C2*RL*RM2*RT2
    + C1*C3*RIN*RM2*RT2 + C1*C2*RIN*RM2*RT2 + C2*C3*RB*RM2*RT2 + C1*C2*RL*RM1*RT2
    + C2*C3*RIN*RM1*RT2 + C1*C2*RIN*RM1*RT2 + C2*C3*R1*RM1*RT2 + C1*C3*RIN*RL*RT2
    + C1*C2*RIN*RL*RT2 + C1*C2*RB*RL*RT2 + C1*C3*R1*RL*RT2 + C1*C2*R1*RL*RT2
    + C2*C3*RB*RIN*RT2 + C1*C2*RB*RIN*RT2 + C1*C3*R1*RIN*RT2 + C1*C2*R1*RIN*RT2
    + C2*C3*R1*RB*RT2 + C1*C3*RM1*RM2*RT1 + C1*C3*RL*RM2*RT1 + C1*C2*RL*RM2*RT1
    + C1*C3*RIN*RM2*RT1 + C1*C2*RIN*RM2*RT1 + C1*C3*RB*RM2*RT1 + C1*C3*R1*RM2*RT1
    + C1*C2*R1*RM2*RT1 + C1*C2*RL*RM1*RT1 + C1*C3*RIN*RM1*RT1 + C1*C2*RIN*RM1*RT1
    + C1*C3*R1*RM1*RT1 + C1*C2*R1*RM1*RT1 + C1*C3*RIN*RL*RT1 + C1*C2*RIN*RL*RT1
    + C1*C2*RB*RL*RT1 + C1*C3*R1*RL*RT1 + C1*C2*R1*RL*RT1 + C1*C3*RB*RIN*RT1
    + C1*C2*RB*RIN*RT1 + C1*C3*R1*RB*RT1 + C1*C2*R1*RB*RT1 + C2*C3*RL*RM1*RM2
    + C1*C3*RL*RM1*RM2 + C2*C3*RIN*RM1*RM2 + C1*C3*RIN*RM1*RM2 + C2*C3*R1*RM1*RM2
    + C2*C3*RB*RL*RM2 + C1*C3*RB*RL*RM2 + C1*C3*R1*RL*RM2 + C1*C2*R1*RL*RM2
    + C2*C3*RB*RIN*RM2 + C1*C3*RB*RIN*RM2 + C1*C3*R1*RIN*RM2 + C1*C2*R1*RIN*RM2
    + C2*C3*R1*RB*RM2 + C2*C3*RIN*RL*RM1 + C1*C3*RIN*RL*RM1 + C2*C3*R1*RL*RM1
    + C1*C3*R1*RL*RM1 + C1*C2*R1*RL*RM1 + C1*C3*R1*RIN*RM1 + C1*C2*R1*RIN*RM1
    + C2*C3*RB*RIN*RL + C1*C3*RB*RIN*RL + C1*C3*R1*RIN*RL + C1*C2*R1*RIN*RL
    + C2*C3*R1*RB*RL + C1*C3*R1*RB*RL + C1*C2*R1*RB*RL + C1*C3*R1*RB*RIN
    + C1*C2*R1*RB*RIN;

  const denCIm = C1*RT1*RT2 + C3*RM2*RT2 + C2*RM2*RT2 + C2*RM1*RT2 + C1*RL*RT2
    + C3*RIN*RT2 + C2*RIN*RT2 + C1*RIN*RT2 + C2*RB*RT2 + C3*R1*RT2 + C2*R1*RT2
    + C1*RM2*RT1 + C1*RM1*RT1 + C1*RL*RT1 + C1*RB*RT1 + C3*RM1*RM2 + C3*RL*RM2
    + C2*RL*RM2 + C1*RL*RM2 + C3*RIN*RM2 + C2*RIN*RM2 + C1*RIN*RM2 + C3*RB*RM2
    + C3*R1*RM2 + C2*R1*RM2 + C2*RL*RM1 + C1*RL*RM1 + C3*RIN*RM1 + C2*RIN*RM1
    + C1*RIN*RM1 + C3*R1*RM1 + C2*R1*RM1 + C3*RIN*RL + C2*RIN*RL + C1*RIN*RL
    + C2*RB*RL + C1*RB*RL + C3*R1*RL + C2*R1*RL + C3*RB*RIN + C2*RB*RIN
    + C1*RB*RIN + C3*R1*RB + C2*R1*RB;

  const denDRe = RT2 + RM2 + RM1 + RL + RB;

  // Transfer function numerator coefficients
  const numAIm = C1*C2*C3*RL*RM1*RM2*RT2 + C1*C2*C3*RB*RL*RM2*RT2
    + C1*C2*C3*R1*RL*RM1*RT2 + C1*C2*C3*R1*RB*RL*RT2 + C1*C2*C3*RL*RM1*RM2*RT1
    + C1*C2*C3*RB*RL*RM2*RT1 + C1*C2*C3*R1*RL*RM1*RM2 + C1*C2*C3*R1*RB*RL*RM2;

  const numBRe = C1*C3*RL*RM2*RT2 + C1*C2*RL*RM2*RT2 + C1*C2*RL*RM1*RT2 + C1*C2*RB*RL*RT2
    + C1*C3*R1*RL*RT2 + C1*C2*R1*RL*RT2 + C1*C3*RL*RM2*RT1 + C1*C2*RL*RM2*RT1
    + C1*C2*RL*RM1*RT1 + C1*C2*RB*RL*RT1 + C2*C3*RL*RM1*RM2 + C1*C3*RL*RM1*RM2
    + C2*C3*RB*RL*RM2 + C1*C3*RB*RL*RM2 + C1*C3*R1*RL*RM2 + C1*C2*R1*RL*RM2
    + C1*C3*R1*RL*RM1 + C1*C2*R1*RL*RM1 + C1*C3*R1*RB*RL + C1*C2*R1*RB*RL;

  const numCIm = C1*RL*RT2 + C3*RL*RM2 + C2*RL*RM2 + C1*RL*RM2 + C2*RL*RM1 + C1*RL*RM1
    + C2*RB*RL + C1*RB*RL;

  const numDRe = 0;

  return [
    [numDRe, numCIm, numBRe, numAIm],
    [denDRe, denCIm, denBRe, denAIm]
  ];
});