import { Crate } from './Crate';
import { testTonestack } from '../_testTonestack';

testTonestack(Crate, function (controlValues) {
  let {
    RIN, R1, R2, R3, R4, RL, C1, C2, C3, C4,
    RT: [RT2, RT1],
    RM: [RM],
    RB: [RB]
  } = this.processComponentValues(controlValues);

  RB += R4;
  RT1 = RT1 + R3;
  RM = RM * R2 / (RM + R2);

  // Transfer function denominator coefficients
  const denYIm = 0;

  const denXRe = C1*C2*C3*C4*RB*RIN*RM*RT1*RT2 + C1*C2*C3*C4*R1*RB*RM*RT1*RT2
    + C1*C2*C3*C4*RB*RIN*RL*RM*RT2 + C1*C2*C3*C4*R1*RB*RL*RM*RT2
    + C1*C2*C3*C4*R1*RB*RIN*RM*RT2 + C1*C2*C3*C4*RB*RIN*RL*RM*RT1
    + C1*C2*C3*C4*R1*RB*RL*RM*RT1 + C1*C2*C3*C4*R1*RB*RIN*RL*RM;

  const denAIm = C1*C3*C4*RIN*RM*RT1*RT2 + C1*C2*C4*RIN*RM*RT1*RT2
    + C1*C2*C3*RIN*RM*RT1*RT2 + C1*C2*C4*RB*RM*RT1*RT2 + C1*C2*C3*RB*RM*RT1*RT2
    + C1*C3*C4*R1*RM*RT1*RT2 + C1*C2*C4*R1*RM*RT1*RT2 + C1*C2*C3*R1*RM*RT1*RT2
    + C1*C2*C3*RB*RIN*RT1*RT2 + C1*C2*C3*R1*RB*RT1*RT2 + C1*C3*C4*RIN*RL*RM*RT2
    + C1*C2*C4*RIN*RL*RM*RT2 + C1*C2*C3*RIN*RL*RM*RT2 + C1*C2*C4*RB*RL*RM*RT2
    + C1*C2*C3*RB*RL*RM*RT2 + C1*C3*C4*R1*RL*RM*RT2 + C1*C2*C4*R1*RL*RM*RT2
    + C1*C2*C3*R1*RL*RM*RT2 + C2*C3*C4*RB*RIN*RM*RT2 + C1*C2*C4*RB*RIN*RM*RT2
    + C1*C2*C3*RB*RIN*RM*RT2 + C1*C3*C4*R1*RIN*RM*RT2 + C1*C2*C4*R1*RIN*RM*RT2
    + C1*C2*C3*R1*RIN*RM*RT2 + C2*C3*C4*R1*RB*RM*RT2 + C1*C2*C3*RB*RIN*RL*RT2
    + C1*C2*C3*R1*RB*RL*RT2 + C1*C2*C3*R1*RB*RIN*RT2 + C1*C3*C4*RIN*RL*RM*RT1
    + C1*C2*C4*RIN*RL*RM*RT1 + C1*C2*C3*RIN*RL*RM*RT1 + C1*C2*C4*RB*RL*RM*RT1
    + C1*C2*C3*RB*RL*RM*RT1 + C1*C3*C4*R1*RL*RM*RT1 + C1*C2*C4*R1*RL*RM*RT1
    + C1*C2*C3*R1*RL*RM*RT1 + C1*C3*C4*RB*RIN*RM*RT1 + C1*C2*C4*RB*RIN*RM*RT1
    + C1*C2*C3*RB*RIN*RM*RT1 + C1*C3*C4*R1*RB*RM*RT1 + C1*C2*C4*R1*RB*RM*RT1
    + C1*C2*C3*R1*RB*RM*RT1 + C1*C2*C3*RB*RIN*RL*RT1 + C1*C2*C3*R1*RB*RL*RT1
    + C2*C3*C4*RB*RIN*RL*RM + C1*C3*C4*RB*RIN*RL*RM + C1*C3*C4*R1*RIN*RL*RM
    + C1*C2*C4*R1*RIN*RL*RM + C1*C2*C3*R1*RIN*RL*RM + C2*C3*C4*R1*RB*RL*RM
    + C1*C3*C4*R1*RB*RL*RM + C1*C2*C4*R1*RB*RL*RM + C1*C2*C3*R1*RB*RL*RM
    + C1*C3*C4*R1*RB*RIN*RM + C1*C2*C4*R1*RB*RIN*RM + C1*C2*C3*R1*RB*RIN*RM
    + C1*C2*C3*R1*RB*RIN*RL;

  const denBRe = C1*C4*RM*RT1*RT2 + C1*C3*RM*RT1*RT2 + C1*C3*RIN*RT1*RT2
    + C1*C2*RIN*RT1*RT2 + C1*C2*RB*RT1*RT2 + C1*C3*R1*RT1*RT2 + C1*C2*R1*RT1*RT2
    + C1*C4*RL*RM*RT2 + C1*C3*RL*RM*RT2 + C3*C4*RIN*RM*RT2 + C2*C4*RIN*RM*RT2
    + C1*C4*RIN*RM*RT2 + C2*C3*RIN*RM*RT2 + C1*C3*RIN*RM*RT2 + C2*C4*RB*RM*RT2
    + C2*C3*RB*RM*RT2 + C3*C4*R1*RM*RT2 + C2*C4*R1*RM*RT2 + C2*C3*R1*RM*RT2
    + C1*C3*RIN*RL*RT2 + C1*C2*RIN*RL*RT2 + C1*C2*RB*RL*RT2 + C1*C3*R1*RL*RT2
    + C1*C2*R1*RL*RT2 + C2*C3*RB*RIN*RT2 + C1*C2*RB*RIN*RT2 + C1*C3*R1*RIN*RT2
    + C1*C2*R1*RIN*RT2 + C2*C3*R1*RB*RT2 + C1*C4*RL*RM*RT1 + C1*C3*RL*RM*RT1
    + C1*C4*RB*RM*RT1 + C1*C3*RB*RM*RT1 + C1*C3*RIN*RL*RT1 + C1*C2*RIN*RL*RT1
    + C1*C2*RB*RL*RT1 + C1*C3*R1*RL*RT1 + C1*C2*R1*RL*RT1 + C1*C3*RB*RIN*RT1
    + C1*C2*RB*RIN*RT1 + C1*C3*R1*RB*RT1 + C1*C2*R1*RB*RT1 + C3*C4*RIN*RL*RM
    + C2*C4*RIN*RL*RM + C1*C4*RIN*RL*RM + C2*C3*RIN*RL*RM + C1*C3*RIN*RL*RM
    + C2*C4*RB*RL*RM + C1*C4*RB*RL*RM + C2*C3*RB*RL*RM + C1*C3*RB*RL*RM
    + C3*C4*R1*RL*RM + C2*C4*R1*RL*RM + C2*C3*R1*RL*RM + C3*C4*RB*RIN*RM
    + C2*C4*RB*RIN*RM + C1*C4*RB*RIN*RM + C2*C3*RB*RIN*RM + C1*C3*RB*RIN*RM
    + C3*C4*R1*RB*RM + C2*C4*R1*RB*RM + C2*C3*R1*RB*RM + C2*C3*RB*RIN*RL
    + C1*C3*RB*RIN*RL + C1*C3*R1*RIN*RL + C1*C2*R1*RIN*RL + C2*C3*R1*RB*RL
    + C1*C3*R1*RB*RL + C1*C2*R1*RB*RL + C1*C3*R1*RB*RIN + C1*C2*R1*RB*RIN;

  const denCIm = C1*RT1*RT2 + C4*RM*RT2 + C3*RM*RT2 + C1*RL*RT2 + C3*RIN*RT2 + C2*RIN*RT2
    + C1*RIN*RT2 + C2*RB*RT2 + C3*R1*RT2 + C2*R1*RT2 + C1*RL*RT1 + C1*RB*RT1
    + C4*RL*RM + C3*RL*RM + C4*RB*RM + C3*RB*RM + C3*RIN*RL + C2*RIN*RL
    + C1*RIN*RL + C2*RB*RL + C1*RB*RL + C3*R1*RL + C2*R1*RL + C3*RB*RIN
    + C2*RB*RIN + C1*RB*RIN + C3*R1*RB + C2*R1*RB;

  const denDRe = RT2 + RL + RB;

  // Transfer function numerator coefficients
  const numYIm = 0;

  const numXRe = C1*C2*C3*C4*R1*RB*RL*RM*RT2;

  const numAIm = C1*C2*C4*RB*RL*RM*RT2 + C1*C2*C3*RB*RL*RM*RT2 + C1*C3*C4*R1*RL*RM*RT2
    + C1*C2*C4*R1*RL*RM*RT2 + C1*C2*C3*R1*RL*RM*RT2 + C1*C2*C3*R1*RB*RL*RT2
    + C1*C2*C4*RB*RL*RM*RT1 + C1*C2*C3*RB*RL*RM*RT1 + C1*C3*C4*R1*RB*RL*RM
    + C1*C2*C4*R1*RB*RL*RM + C1*C2*C3*R1*RB*RL*RM;

  const numBRe = C1*C4*RL*RM*RT2 + C1*C3*RL*RM*RT2 + C1*C2*RB*RL*RT2 + C1*C3*R1*RL*RT2
    + C1*C2*R1*RL*RT2 + C1*C2*RB*RL*RT1 + C2*C4*RB*RL*RM + C1*C4*RB*RL*RM
    + C2*C3*RB*RL*RM + C1*C3*RB*RL*RM + C1*C3*R1*RB*RL + C1*C2*R1*RB*RL;

  const numCIm = C1*RL*RT2 + C2*RB*RL + C1*RB*RL;

  const numDRe = 0;

  return [
    [numDRe, numCIm, numBRe, numAIm, numXRe],
    [denDRe, denCIm, denBRe, denAIm, denXRe]
  ];
});