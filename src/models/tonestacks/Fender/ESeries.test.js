import { ESeries } from './ESeries';
import { testTonestack } from '../_testTonestack';

testTonestack(ESeries, function (controlValues) {
  const {
    RIN, R2, R3, R5, C1, C2, C3, C4,
    RT: [RT2, RT1],
    // Sic! (Usually the other way around: RB2, RB1)
    RB: [RB1, RB2]
  } = this.processComponentValues(controlValues);

  const denXRe = RB1*RB2*RIN*RT1*RT2*C1*C2*C3*C4 + R3*RB2*RIN*RT1*RT2*C1*C2*C3*C4
    + R2*RB2*RIN*RT1*RT2*C1*C2*C3*C4 + R3*RB1*RIN*RT1*RT2*C1*C2*C3*C4
    + R2*RB1*RIN*RT1*RT2*C1*C2*C3*C4 + R2*RB1*RB2*RT1*RT2*C1*C2*C3*C4
    + R2*R3*RB2*RT1*RT2*C1*C2*C3*C4 + R2*R3*RB1*RT1*RT2*C1*C2*C3*C4
    + R5*RB1*RB2*RIN*RT2*C1*C2*C3*C4 + R3*RB1*RB2*RIN*RT2*C1*C2*C3*C4
    + R3*R5*RB2*RIN*RT2*C1*C2*C3*C4 + R2*R5*RB2*RIN*RT2*C1*C2*C3*C4
    + R2*R3*RB2*RIN*RT2*C1*C2*C3*C4 + R3*R5*RB1*RIN*RT2*C1*C2*C3*C4
    + R2*R5*RB1*RIN*RT2*C1*C2*C3*C4 + R2*R3*RB1*RIN*RT2*C1*C2*C3*C4
    + R2*R5*RB1*RB2*RT2*C1*C2*C3*C4 + R2*R3*RB1*RB2*RT2*C1*C2*C3*C4
    + R2*R3*R5*RB2*RT2*C1*C2*C3*C4 + R2*R3*R5*RB1*RT2*C1*C2*C3*C4
    + R5*RB1*RB2*RIN*RT1*C1*C2*C3*C4 + R3*RB1*RB2*RIN*RT1*C1*C2*C3*C4
    + R2*RB1*RB2*RIN*RT1*C1*C2*C3*C4 + R3*R5*RB2*RIN*RT1*C1*C2*C3*C4
    + R2*R5*RB2*RIN*RT1*C1*C2*C3*C4 + R3*R5*RB1*RIN*RT1*C1*C2*C3*C4
    + R2*R5*RB1*RIN*RT1*C1*C2*C3*C4 + R2*R5*RB1*RB2*RT1*C1*C2*C3*C4
    + R2*R3*RB1*RB2*RT1*C1*C2*C3*C4 + R2*R3*R5*RB2*RT1*C1*C2*C3*C4
    + R2*R3*R5*RB1*RT1*C1*C2*C3*C4 + R2*R5*RB1*RB2*RIN*C1*C2*C3*C4
    + R2*R3*RB1*RB2*RIN*C1*C2*C3*C4 + R2*R3*R5*RB2*RIN*C1*C2*C3*C4
    + R2*R3*R5*RB1*RIN*C1*C2*C3*C4;

  const denAIm = RB1*RIN*RT1*RT2*C1*C2*C3 + R3*RIN*RT1*RT2*C1*C2*C3
    + R2*RIN*RT1*RT2*C1*C2*C3 + R2*RB1*RT1*RT2*C1*C2*C3
    + R2*R3*RT1*RT2*C1*C2*C3 + R5*RB1*RIN*RT2*C1*C2*C3
    + R3*RB1*RIN*RT2*C1*C2*C3 + R3*R5*RIN*RT2*C1*C2*C3
    + R2*R5*RIN*RT2*C1*C2*C3 + R2*R3*RIN*RT2*C1*C2*C3
    + R2*R5*RB1*RT2*C1*C2*C3 + R2*R3*RB1*RT2*C1*C2*C3
    + R2*R3*R5*RT2*C1*C2*C3 + R5*RB1*RIN*RT1*C1*C2*C3
    + R3*RB1*RIN*RT1*C1*C2*C3 + R2*RB1*RIN*RT1*C1*C2*C3
    + R3*R5*RIN*RT1*C1*C2*C3 + R2*R5*RIN*RT1*C1*C2*C3
    + R2*R5*RB1*RT1*C1*C2*C3 + R2*R3*RB1*RT1*C1*C2*C3
    + R2*R3*R5*RT1*C1*C2*C3 + R2*R5*RB1*RIN*C1*C2*C3
    + R2*R3*RB1*RIN*C1*C2*C3 + R2*R3*R5*RIN*C1*C2*C3
    + RB1*RB2*RT1*RT2*C1*C2*C4 + R3*RB2*RT1*RT2*C1*C2*C4
    + R2*RB2*RT1*RT2*C1*C2*C4 + R3*RB1*RT1*RT2*C1*C2*C4
    + R2*RB1*RT1*RT2*C1*C2*C4 + RB1*RB2*RIN*RT2*C1*C2*C4
    + R3*RB2*RIN*RT2*C1*C2*C4 + R2*RB2*RIN*RT2*C1*C2*C4
    + R3*RB1*RIN*RT2*C1*C2*C4 + R2*RB1*RIN*RT2*C1*C2*C4
    + R5*RB1*RB2*RT2*C1*C2*C4 + R3*RB1*RB2*RT2*C1*C2*C4
    + R2*RB1*RB2*RT2*C1*C2*C4 + R3*R5*RB2*RT2*C1*C2*C4
    + R2*R5*RB2*RT2*C1*C2*C4 + R3*R5*RB1*RT2*C1*C2*C4
    + R2*R5*RB1*RT2*C1*C2*C4 + R5*RB1*RB2*RT1*C1*C2*C4
    + R3*RB1*RB2*RT1*C1*C2*C4 + R2*RB1*RB2*RT1*C1*C2*C4
    + R3*R5*RB2*RT1*C1*C2*C4 + R2*R5*RB2*RT1*C1*C2*C4
    + R3*R5*RB1*RT1*C1*C2*C4 + R2*R5*RB1*RT1*C1*C2*C4
    + R5*RB1*RB2*RIN*C1*C2*C4 + R3*RB1*RB2*RIN*C1*C2*C4
    + R2*RB1*RB2*RIN*C1*C2*C4 + R3*R5*RB2*RIN*C1*C2*C4
    + R2*R5*RB2*RIN*C1*C2*C4 + R3*R5*RB1*RIN*C1*C2*C4
    + R2*R5*RB1*RIN*C1*C2*C4 + RB1*RB2*RIN*RT1*C2*C3*C4
    + R3*RB2*RIN*RT1*C2*C3*C4 + R2*RB2*RIN*RT1*C2*C3*C4
    + R3*RB1*RIN*RT1*C2*C3*C4 + R2*RB1*RIN*RT1*C2*C3*C4
    + R2*RB1*RB2*RT1*C2*C3*C4 + R2*R3*RB2*RT1*C2*C3*C4
    + R2*R3*RB1*RT1*C2*C3*C4 + R5*RB1*RB2*RIN*C2*C3*C4
    + R3*RB1*RB2*RIN*C2*C3*C4 + R3*R5*RB2*RIN*C2*C3*C4
    + R2*R5*RB2*RIN*C2*C3*C4 + R2*R3*RB2*RIN*C2*C3*C4
    + R3*R5*RB1*RIN*C2*C3*C4 + R2*R5*RB1*RIN*C2*C3*C4
    + R2*R3*RB1*RIN*C2*C3*C4 + R2*R5*RB1*RB2*C2*C3*C4
    + R2*R3*RB1*RB2*C2*C3*C4 + R2*R3*R5*RB2*C2*C3*C4
    + R2*R3*R5*RB1*C2*C3*C4 + RB1*RB2*RIN*RT2*C1*C3*C4
    + R3*RB2*RIN*RT2*C1*C3*C4 + R2*RB2*RIN*RT2*C1*C3*C4
    + R3*RB1*RIN*RT2*C1*C3*C4 + R2*RB1*RIN*RT2*C1*C3*C4
    + R2*RB1*RB2*RT2*C1*C3*C4 + R2*R3*RB2*RT2*C1*C3*C4
    + R2*R3*RB1*RT2*C1*C3*C4 + R5*RB1*RB2*RIN*C1*C3*C4
    + R3*RB1*RB2*RIN*C1*C3*C4 + R2*RB1*RB2*RIN*C1*C3*C4
    + R3*R5*RB2*RIN*C1*C3*C4 + R2*R5*RB2*RIN*C1*C3*C4
    + R3*R5*RB1*RIN*C1*C3*C4 + R2*R5*RB1*RIN*C1*C3*C4
    + R2*R5*RB1*RB2*C1*C3*C4 + R2*R3*RB1*RB2*C1*C3*C4
    + R2*R3*R5*RB2*C1*C3*C4 + R2*R3*R5*RB1*C1*C3*C4;

  const denBRe = RB1*RIN*RT1*C2*C3
    + R3*RIN*RT1*C2*C3 + R2*RIN*RT1*C2*C3 + R2*RB1*RT1*C2*C3
    + R2*R3*RT1*C2*C3 + R5*RB1*RIN*C2*C3 + R3*RB1*RIN*C2*C3
    + R3*R5*RIN*C2*C3 + R2*R5*RIN*C2*C3 + R2*R3*RIN*C2*C3
    + R2*R5*RB1*C2*C3 + R2*R3*RB1*C2*C3 + R2*R3*R5*C2*C3
    + RB1*RIN*RT2*C1*C3 + R3*RIN*RT2*C1*C3 + R2*RIN*RT2*C1*C3
    + R2*RB1*RT2*C1*C3 + R2*R3*RT2*C1*C3 + R5*RB1*RIN*C1*C3
    + R3*RB1*RIN*C1*C3 + R2*RB1*RIN*C1*C3 + R3*R5*RIN*C1*C3
    + R2*R5*RIN*C1*C3 + R2*R5*RB1*C1*C3 + R2*R3*RB1*C1*C3 + R2*R3*R5*C1*C3
    + RB1*RT1*RT2*C1*C2 + R3*RT1*RT2*C1*C2 + R2*RT1*RT2*C1*C2
    + RB1*RIN*RT2*C1*C2 + R3*RIN*RT2*C1*C2 + R2*RIN*RT2*C1*C2
    + R5*RB1*RT2*C1*C2 + R3*RB1*RT2*C1*C2 + R2*RB1*RT2*C1*C2
    + R3*R5*RT2*C1*C2 + R2*R5*RT2*C1*C2 + R5*RB1*RT1*C1*C2
    + R3*RB1*RT1*C1*C2 + R2*RB1*RT1*C1*C2 + R3*R5*RT1*C1*C2
    + R2*R5*RT1*C1*C2 + R5*RB1*RIN*C1*C2 + R3*RB1*RIN*C1*C2
    + R2*RB1*RIN*C1*C2 + R3*R5*RIN*C1*C2 + R2*R5*RIN*C1*C2
    + RB1*RB2*RT1*C2*C4 + R3*RB2*RT1*C2*C4
    + R2*RB2*RT1*C2*C4 + R3*RB1*RT1*C2*C4 + R2*RB1*RT1*C2*C4
    + RB1*RB2*RIN*C2*C4 + R3*RB2*RIN*C2*C4 + R2*RB2*RIN*C2*C4
    + R3*RB1*RIN*C2*C4 + R2*RB1*RIN*C2*C4 + R5*RB1*RB2*C2*C4
    + R3*RB1*RB2*C2*C4 + R2*RB1*RB2*C2*C4 + R3*R5*RB2*C2*C4
    + R2*R5*RB2*C2*C4 + R3*R5*RB1*C2*C4 + R2*R5*RB1*C2*C4
    + RB1*RB2*RT2*C1*C4 + R3*RB2*RT2*C1*C4 + R2*RB2*RT2*C1*C4
    + R3*RB1*RT2*C1*C4 + R2*RB1*RT2*C1*C4 + R5*RB1*RB2*C1*C4
    + R3*RB1*RB2*C1*C4 + R2*RB1*RB2*C1*C4 + R3*R5*RB2*C1*C4
    + R2*R5*RB2*C1*C4 + R3*R5*RB1*C1*C4 + R2*R5*RB1*C1*C4
    + R3*RB2*RIN*C3*C4 + R2*RB2*RIN*C3*C4 + R3*RB1*RIN*C3*C4
    + R2*RB1*RIN*C3*C4 + R2*RB1*RB2*C3*C4 + R2*R3*RB2*C3*C4
    + R2*R3*RB1*C3*C4 + RB1*RB2*RIN*C3*C4;

  const denCIm = RB1*RT1*C2 + R3*RT1*C2 + R2*RT1*C2 + RB1*RIN*C2 + R3*RIN*C2 + R2*RIN*C2 + R5*RB1*C2
    + R3*RB1*C2 + R2*RB1*C2 + R3*R5*C2 + R2*R5*C2 + RB1*RT2*C1 + R3*RT2*C1 + R2*RT2*C1 + R5*RB1*C1 + R3*RB1*C1 + R2*RB1*C1 + R3*R5*C1 + R2*R5*C1
    + RB1*RIN*C3 + R3*RIN*C3 + R2*RIN*C3 + R2*RB1*C3 + R2*R3*C3 + RB1*RB2*C4 + R3*RB2*C4 + R2*RB2*C4 + R3*RB1*C4 + R2*RB1*C4;

  const denDRe = RB1 + R3 + R2;

  const numXRe = C1*C2*C3*C4*R2*RB1*RB2*RT1*RT2 + C1*C2*C3*C4*R2*R5*RB1*RB2*RT2
    + C1*C2*C3*C4*R2*R3*RB1*RB2*RT2 + C1*C2*C3*C4*R2*R3*R5*RB2*RT2
    + C1*C2*C3*C4*R2*R3*R5*RB1*RT2;

  const numAIm = C1*C2*C3*R2*RB1*RT1*RT2 + C1*C2*C4*R5*RB1*RB2*RT2
    + C1*C2*C4*R3*RB1*RB2*RT2 + C1*C3*C4*R2*RB1*RB2*RT2 + C1*C2*C4*R2*RB1*RB2*RT2
    + C1*C2*C4*R3*R5*RB2*RT2 + C1*C2*C4*R2*R5*RB2*RT2 + C1*C2*C4*R3*R5*RB1*RT2
    + C1*C2*C4*R2*R5*RB1*RT2 + C1*C2*C3*R2*R5*RB1*RT2 + C1*C2*C3*R2*R3*RB1*RT2
    + C1*C2*C3*R2*R3*R5*RT2 + C2*C3*C4*R2*RB1*RB2*RT1 + C2*C3*C4*R2*R5*RB1*RB2
    + C2*C3*C4*R2*R3*RB1*RB2 + C2*C3*C4*R2*R3*R5*RB2 + C2*C3*C4*R2*R3*R5*RB1;

  const numBRe = C1*C2*R5*RB1*RT2 + C1*C2*R3*RB1*RT2 + C1*C3*R2*RB1*RT2
    + C1*C2*R2*RB1*RT2 + C1*C2*R3*R5*RT2 + C1*C2*R2*R5*RT2 + C2*C3*R2*RB1*RT1
    + C2*C4*R5*RB1*RB2 + C2*C4*R3*RB1*RB2 + C3*C4*R2*RB1*RB2 + C2*C4*R2*RB1*RB2
    + C2*C4*R3*R5*RB2 + C2*C4*R2*R5*RB2 + C2*C4*R3*R5*RB1 + C2*C4*R2*R5*RB1
    + C2*C3*R2*R5*RB1 + C2*C3*R2*R3*RB1 + C2*C3*R2*R3*R5;

  const numCIm = C2*R5*RB1 + C2*R3*RB1 + C3*R2*RB1 + C2*R2*RB1 + C2*R3*R5 + C2*R2*R5;

  const numDRe = 0;

  return [
    [numDRe, numCIm, numBRe, numAIm, numXRe],
    [denDRe, denCIm, denBRe, denAIm, denXRe]
  ];
});