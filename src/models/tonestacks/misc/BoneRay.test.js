import { BoneRay } from './BoneRay';
import { testTonestack } from '../_testTonestack';

testTonestack(BoneRay, function (controlValues) {
  const {
    RIN, R1, R2, RL, C1, C2, C3, C4,
    RT: [RT2, RT1],
    RM: [RM2, RM1]
  } = this.processComponentValues(controlValues);

  // Transfer function denominator coefficients
  const denXRe = C1*C2*C3*C4*R2*RIN*RM1*RM2*RT1*RT2 + C1*C2*C3*C4*R1*RIN*RM1*RM2*RT1*RT2
    + C1*C2*C3*C4*R1*R2*RM1*RM2*RT1*RT2 + C1*C2*C3*C4*R2*RIN*RL*RM2*RT1*RT2
    + C1*C2*C3*C4*R1*RIN*RL*RM2*RT1*RT2 + C1*C2*C3*C4*R1*R2*RL*RM2*RT1*RT2
    + C1*C2*C3*C4*R2*RIN*RL*RM1*RM2*RT2 + C1*C2*C3*C4*R1*RIN*RL*RM1*RM2*RT2
    + C1*C2*C3*C4*R1*R2*RL*RM1*RM2*RT2 + C1*C2*C3*C4*R1*R2*RIN*RM1*RM2*RT2
    + C1*C2*C3*C4*R1*R2*RIN*RL*RM2*RT2 + C1*C2*C3*C4*R2*RIN*RL*RM1*RM2*RT1
    + C1*C2*C3*C4*R1*RIN*RL*RM1*RM2*RT1 + C1*C2*C3*C4*R1*R2*RL*RM1*RM2*RT1
    + C1*C2*C3*C4*R1*R2*RIN*RL*RM1*RM2;

  const denAIm = C2*C3*C4*RIN*RM1*RM2*RT1*RT2 + C1*C3*C4*RIN*RM1*RM2*RT1*RT2
    + C1*C2*C4*RIN*RM1*RM2*RT1*RT2 + C2*C3*C4*R2*RM1*RM2*RT1*RT2
    + C1*C3*C4*R1*RM1*RM2*RT1*RT2 + C1*C2*C4*R1*RM1*RM2*RT1*RT2
    + C2*C3*C4*RIN*RL*RM2*RT1*RT2 + C1*C3*C4*RIN*RL*RM2*RT1*RT2
    + C1*C2*C4*RIN*RL*RM2*RT1*RT2 + C2*C3*C4*R2*RL*RM2*RT1*RT2
    + C1*C3*C4*R1*RL*RM2*RT1*RT2 + C1*C2*C4*R1*RL*RM2*RT1*RT2
    + C1*C3*C4*R2*RIN*RM2*RT1*RT2 + C1*C2*C4*R2*RIN*RM2*RT1*RT2
    + C1*C2*C3*R2*RIN*RM2*RT1*RT2 + C1*C3*C4*R1*RIN*RM2*RT1*RT2
    + C1*C2*C4*R1*RIN*RM2*RT1*RT2 + C1*C2*C3*R1*RIN*RM2*RT1*RT2
    + C1*C3*C4*R1*R2*RM2*RT1*RT2 + C1*C2*C4*R1*R2*RM2*RT1*RT2
    + C1*C2*C3*R1*R2*RM2*RT1*RT2 + C1*C3*C4*R2*RIN*RM1*RT1*RT2
    + C1*C3*C4*R1*RIN*RM1*RT1*RT2 + C1*C3*C4*R1*R2*RM1*RT1*RT2
    + C1*C3*C4*R2*RIN*RL*RT1*RT2 + C1*C3*C4*R1*RIN*RL*RT1*RT2
    + C1*C3*C4*R1*R2*RL*RT1*RT2 + C2*C3*C4*RIN*RL*RM1*RM2*RT2
    + C1*C3*C4*RIN*RL*RM1*RM2*RT2 + C1*C2*C4*RIN*RL*RM1*RM2*RT2
    + C2*C3*C4*R2*RL*RM1*RM2*RT2 + C1*C3*C4*R1*RL*RM1*RM2*RT2
    + C1*C2*C4*R1*RL*RM1*RM2*RT2 + C2*C3*C4*R1*RIN*RM1*RM2*RT2
    + C1*C3*C4*R1*RIN*RM1*RM2*RT2 + C1*C2*C4*R1*RIN*RM1*RM2*RT2
    + C2*C3*C4*R1*R2*RM1*RM2*RT2 + C1*C3*C4*R2*RIN*RL*RM2*RT2
    + C1*C2*C4*R2*RIN*RL*RM2*RT2 + C1*C2*C3*R2*RIN*RL*RM2*RT2
    + C2*C3*C4*R1*RIN*RL*RM2*RT2 + C1*C2*C3*R1*RIN*RL*RM2*RT2
    + C2*C3*C4*R1*R2*RL*RM2*RT2 + C1*C3*C4*R1*R2*RL*RM2*RT2
    + C1*C2*C4*R1*R2*RL*RM2*RT2 + C1*C2*C3*R1*R2*RL*RM2*RT2
    + C1*C3*C4*R1*R2*RIN*RM2*RT2 + C1*C2*C4*R1*R2*RIN*RM2*RT2
    + C1*C2*C3*R1*R2*RIN*RM2*RT2 + C1*C3*C4*R2*RIN*RL*RM1*RT2
    + C1*C3*C4*R1*RIN*RL*RM1*RT2 + C1*C3*C4*R1*R2*RL*RM1*RT2
    + C1*C3*C4*R1*R2*RIN*RM1*RT2 + C1*C3*C4*R1*R2*RIN*RL*RT2
    + C2*C3*C4*RIN*RL*RM1*RM2*RT1 + C1*C3*C4*RIN*RL*RM1*RM2*RT1
    + C1*C2*C4*RIN*RL*RM1*RM2*RT1 + C2*C3*C4*R2*RL*RM1*RM2*RT1
    + C1*C3*C4*R1*RL*RM1*RM2*RT1 + C1*C2*C4*R1*RL*RM1*RM2*RT1
    + C1*C3*C4*R2*RIN*RM1*RM2*RT1 + C1*C2*C4*R2*RIN*RM1*RM2*RT1
    + C1*C3*C4*R1*RIN*RM1*RM2*RT1 + C1*C2*C4*R1*RIN*RM1*RM2*RT1
    + C1*C3*C4*R1*R2*RM1*RM2*RT1 + C1*C2*C4*R1*R2*RM1*RM2*RT1
    + C1*C2*C3*R2*RIN*RL*RM2*RT1 + C1*C2*C3*R1*RIN*RL*RM2*RT1
    + C1*C2*C3*R1*R2*RL*RM2*RT1 + C1*C3*C4*R2*RIN*RL*RM1*RT1
    + C1*C3*C4*R1*RIN*RL*RM1*RT1 + C1*C3*C4*R1*R2*RL*RM1*RT1
    + C1*C3*C4*R2*RIN*RL*RM1*RM2 + C1*C2*C4*R2*RIN*RL*RM1*RM2
    + C2*C3*C4*R1*RIN*RL*RM1*RM2 + C2*C3*C4*R1*R2*RL*RM1*RM2
    + C1*C3*C4*R1*R2*RL*RM1*RM2 + C1*C2*C4*R1*R2*RL*RM1*RM2
    + C1*C3*C4*R1*R2*RIN*RM1*RM2 + C1*C2*C4*R1*R2*RIN*RM1*RM2
    + C1*C2*C3*R1*R2*RIN*RL*RM2 + C1*C3*C4*R1*R2*RIN*RL*RM1;

  const denBRe = C3*C4*RM1*RM2*RT1*RT2 + C2*C4*RM1*RM2*RT1*RT2 + C3*C4*RL*RM2*RT1*RT2
    + C2*C4*RL*RM2*RT1*RT2 + C3*C4*RIN*RM2*RT1*RT2 + C2*C4*RIN*RM2*RT1*RT2
    + C2*C3*RIN*RM2*RT1*RT2 + C1*C3*RIN*RM2*RT1*RT2 + C1*C2*RIN*RM2*RT1*RT2
    + C3*C4*R2*RM2*RT1*RT2 + C2*C4*R2*RM2*RT1*RT2 + C2*C3*R2*RM2*RT1*RT2
    + C1*C3*R1*RM2*RT1*RT2 + C1*C2*R1*RM2*RT1*RT2 + C3*C4*RIN*RM1*RT1*RT2
    + C1*C4*RIN*RM1*RT1*RT2 + C3*C4*R2*RM1*RT1*RT2 + C1*C4*R1*RM1*RT1*RT2
    + C3*C4*RIN*RL*RT1*RT2 + C1*C4*RIN*RL*RT1*RT2 + C3*C4*R2*RL*RT1*RT2
    + C1*C4*R1*RL*RT1*RT2 + C1*C4*R2*RIN*RT1*RT2 + C1*C3*R2*RIN*RT1*RT2
    + C1*C4*R1*RIN*RT1*RT2 + C1*C3*R1*RIN*RT1*RT2 + C1*C4*R1*R2*RT1*RT2
    + C1*C3*R1*R2*RT1*RT2 + C3*C4*RL*RM1*RM2*RT2 + C2*C4*RL*RM1*RM2*RT2
    + C3*C4*R1*RM1*RM2*RT2 + C2*C4*R1*RM1*RM2*RT2 + C3*C4*RIN*RL*RM2*RT2
    + C2*C4*RIN*RL*RM2*RT2 + C2*C3*RIN*RL*RM2*RT2 + C1*C3*RIN*RL*RM2*RT2
    + C1*C2*RIN*RL*RM2*RT2 + C3*C4*R2*RL*RM2*RT2 + C2*C4*R2*RL*RM2*RT2
    + C2*C3*R2*RL*RM2*RT2 + C3*C4*R1*RL*RM2*RT2 + C2*C4*R1*RL*RM2*RT2
    + C1*C3*R1*RL*RM2*RT2 + C1*C2*R1*RL*RM2*RT2 + C3*C4*R1*RIN*RM2*RT2
    + C2*C4*R1*RIN*RM2*RT2 + C2*C3*R1*RIN*RM2*RT2 + C1*C3*R1*RIN*RM2*RT2
    + C1*C2*R1*RIN*RM2*RT2 + C3*C4*R1*R2*RM2*RT2 + C2*C4*R1*R2*RM2*RT2
    + C2*C3*R1*R2*RM2*RT2 + C3*C4*RIN*RL*RM1*RT2 + C1*C4*RIN*RL*RM1*RT2
    + C3*C4*R2*RL*RM1*RT2 + C1*C4*R1*RL*RM1*RT2 + C3*C4*R1*RIN*RM1*RT2
    + C1*C4*R1*RIN*RM1*RT2 + C3*C4*R1*R2*RM1*RT2 + C1*C4*R2*RIN*RL*RT2
    + C1*C3*R2*RIN*RL*RT2 + C3*C4*R1*RIN*RL*RT2 + C1*C3*R1*RIN*RL*RT2
    + C3*C4*R1*R2*RL*RT2 + C1*C4*R1*R2*RL*RT2 + C1*C3*R1*R2*RL*RT2
    + C1*C4*R1*R2*RIN*RT2 + C1*C3*R1*R2*RIN*RT2 + C3*C4*RL*RM1*RM2*RT1
    + C2*C4*RL*RM1*RM2*RT1 + C3*C4*RIN*RM1*RM2*RT1 + C2*C4*RIN*RM1*RM2*RT1
    + C3*C4*R2*RM1*RM2*RT1 + C2*C4*R2*RM1*RM2*RT1 + C2*C3*RIN*RL*RM2*RT1
    + C1*C3*RIN*RL*RM2*RT1 + C1*C2*RIN*RL*RM2*RT1 + C2*C3*R2*RL*RM2*RT1
    + C1*C3*R1*RL*RM2*RT1 + C1*C2*R1*RL*RM2*RT1 + C1*C3*R2*RIN*RM2*RT1
    + C1*C2*R2*RIN*RM2*RT1 + C1*C3*R1*RIN*RM2*RT1 + C1*C2*R1*RIN*RM2*RT1
    + C1*C3*R1*R2*RM2*RT1 + C1*C2*R1*R2*RM2*RT1 + C3*C4*RIN*RL*RM1*RT1
    + C1*C4*RIN*RL*RM1*RT1 + C3*C4*R2*RL*RM1*RT1 + C1*C4*R1*RL*RM1*RT1
    + C1*C4*R2*RIN*RM1*RT1 + C1*C4*R1*RIN*RM1*RT1 + C1*C4*R1*R2*RM1*RT1
    + C1*C3*R2*RIN*RL*RT1 + C1*C3*R1*RIN*RL*RT1 + C1*C3*R1*R2*RL*RT1
    + C3*C4*RIN*RL*RM1*RM2 + C2*C4*RIN*RL*RM1*RM2 + C3*C4*R2*RL*RM1*RM2
    + C2*C4*R2*RL*RM1*RM2 + C3*C4*R1*RL*RM1*RM2 + C2*C4*R1*RL*RM1*RM2
    + C3*C4*R1*RIN*RM1*RM2 + C2*C4*R1*RIN*RM1*RM2 + C3*C4*R1*R2*RM1*RM2
    + C2*C4*R1*R2*RM1*RM2 + C1*C3*R2*RIN*RL*RM2 + C1*C2*R2*RIN*RL*RM2
    + C2*C3*R1*RIN*RL*RM2 + C2*C3*R1*R2*RL*RM2 + C1*C3*R1*R2*RL*RM2
    + C1*C2*R1*R2*RL*RM2 + C1*C3*R1*R2*RIN*RM2 + C1*C2*R1*R2*RIN*RM2
    + C1*C4*R2*RIN*RL*RM1 + C3*C4*R1*RIN*RL*RM1 + C3*C4*R1*R2*RL*RM1
    + C1*C4*R1*R2*RL*RM1 + C1*C4*R1*R2*RIN*RM1 + C1*C3*R1*R2*RIN*RL;

  const denCIm = C3*RM2*RT1*RT2 + C2*RM2*RT1*RT2 + C4*RM1*RT1*RT2 + C4*RL*RT1*RT2
    + C4*RIN*RT1*RT2 + C3*RIN*RT1*RT2 + C1*RIN*RT1*RT2 + C4*R2*RT1*RT2
    + C3*R2*RT1*RT2 + C1*R1*RT1*RT2 + C3*RL*RM2*RT2 + C2*RL*RM2*RT2
    + C3*R1*RM2*RT2 + C2*R1*RM2*RT2 + C4*RL*RM1*RT2 + C4*R1*RM1*RT2
    + C4*RIN*RL*RT2 + C3*RIN*RL*RT2 + C1*RIN*RL*RT2 + C4*R2*RL*RT2 + C3*R2*RL*RT2
    + C4*R1*RL*RT2 + C1*R1*RL*RT2 + C4*R1*RIN*RT2 + C3*R1*RIN*RT2 + C1*R1*RIN*RT2
    + C4*R1*R2*RT2 + C3*R1*R2*RT2 + C3*RL*RM2*RT1 + C2*RL*RM2*RT1 + C3*RIN*RM2*RT1
    + C2*RIN*RM2*RT1 + C3*R2*RM2*RT1 + C2*R2*RM2*RT1 + C4*RL*RM1*RT1
    + C4*RIN*RM1*RT1 + C4*R2*RM1*RT1 + C3*RIN*RL*RT1 + C1*RIN*RL*RT1
    + C3*R2*RL*RT1 + C1*R1*RL*RT1 + C1*R2*RIN*RT1 + C1*R1*RIN*RT1 + C1*R1*R2*RT1
    + C3*RIN*RL*RM2 + C2*RIN*RL*RM2 + C3*R2*RL*RM2 + C2*R2*RL*RM2 + C3*R1*RL*RM2
    + C2*R1*RL*RM2 + C3*R1*RIN*RM2 + C2*R1*RIN*RM2 + C3*R1*R2*RM2 + C2*R1*R2*RM2
    + C4*RIN*RL*RM1 + C4*R2*RL*RM1 + C4*R1*RL*RM1 + C4*R1*RIN*RM1 + C4*R1*R2*RM1
    + C1*R2*RIN*RL + C3*R1*RIN*RL + C3*R1*R2*RL + C1*R1*R2*RL + C1*R1*R2*RIN;

  const denDRe = RT1*RT2 + RL*RT2 + R1*RT2 + RL*RT1 + RIN*RT1 + R2*RT1 + RIN*RL + R2*RL + R1*RL + R1*RIN + R1*R2;

  // Transfer function numerator multipliers for current I5-I6
  const numXRe = C1*C2*C3*C4*R1*R2*RL*RM1*RM2*RT2;

  const numAIm = C1*C3*C4*R1*RL*RM2*RT1*RT2 + C1*C2*C4*R1*RL*RM2*RT1*RT2
    + C1*C3*C4*R1*RL*RM1*RM2*RT2 + C1*C2*C4*R1*RL*RM1*RM2*RT2
    + C1*C3*C4*R1*R2*RL*RM2*RT2 + C1*C2*C4*R1*R2*RL*RM2*RT2
    + C1*C2*C3*R1*R2*RL*RM2*RT2 + C1*C3*C4*R1*R2*RL*RM1*RT2
    + C1*C3*C4*R1*RL*RM1*RM2*RT1 + C1*C2*C4*R1*RL*RM1*RM2*RT1
    + C1*C3*C4*R1*R2*RL*RM1*RM2 + C1*C2*C4*R1*R2*RL*RM1*RM2;

  const numBRe = C3*C4*RL*RM2*RT1*RT2 + C2*C4*RL*RM2*RT1*RT2 + C1*C4*R1*RL*RT1*RT2
    + C3*C4*R1*RL*RM2*RT2 + C2*C4*R1*RL*RM2*RT2 + C1*C3*R1*RL*RM2*RT2
    + C1*C2*R1*RL*RM2*RT2 + C1*C4*R1*RL*RM1*RT2 + C1*C4*R1*R2*RL*RT2
    + C1*C3*R1*R2*RL*RT2 + C3*C4*RL*RM1*RM2*RT1 + C2*C4*RL*RM1*RM2*RT1
    + C1*C3*R1*RL*RM2*RT1 + C1*C2*R1*RL*RM2*RT1 + C1*C4*R1*RL*RM1*RT1
    + C3*C4*R1*RL*RM1*RM2 + C2*C4*R1*RL*RM1*RM2 + C1*C3*R1*R2*RL*RM2
    + C1*C2*R1*R2*RL*RM2 + C1*C4*R1*R2*RL*RM1;

  const numCIm = C4*RL*RT1*RT2 + C4*R1*RL*RT2 + C1*R1*RL*RT2 + C3*RL*RM2*RT1
    + C2*RL*RM2*RT1 + C4*RL*RM1*RT1 + C1*R1*RL*RT1 + C3*R1*RL*RM2 + C2*R1*RL*RM2
    + C4*R1*RL*RM1 + C1*R1*R2*RL;

  const numDRe = RL*RT1 + R1*RL;

  return [
    [numDRe, numCIm, numBRe, numAIm, numXRe],
    [denDRe, denCIm, denBRe, denAIm, denXRe]
  ];
});