import { Vox } from './Vox';
import { testTonestack } from '../_testTonestack';

testTonestack(Vox, function (controlValues) {
  const {
    RIN, R1, R2, RL, C1, C2, C3,
    RT: [RT2, RT1],
    // Sic!
    RB: [RB1, RB2]
  } = this.processComponentValues(controlValues);

  // Transfer function denominator coefficients
  const denAIm = RB1*RB2*RIN*RT1*RT2*C1*C2*C3 + R2*RB1*RIN*RT1*RT2*C1*C2*C3 + R2*RB1*RB2*RT1*RT2*C1*C2*C3 + R1*RB1*RB2*RT1*RT2*C1*C2*C3
    + R1*R2*RB1*RT1*RT2*C1*C2*C3 + RB1*RB2*RIN*RL*RT2*C1*C2*C3 + R2*RB1*RIN*RL*RT2*C1*C2*C3 + R2*RB1*RB2*RL*RT2*C1*C2*C3
    + R1*RB1*RB2*RL*RT2*C1*C2*C3 + R1*R2*RB1*RL*RT2*C1*C2*C3 + R2*RB1*RB2*RIN*RT2*C1*C2*C3 + R1*RB1*RB2*RIN*RT2*C1*C2*C3
    + R1*R2*RB1*RIN*RT2*C1*C2*C3 + RB1*RB2*RIN*RL*RT1*C1*C2*C3 + R2*RB1*RIN*RL*RT1*C1*C2*C3 + R2*RB1*RB2*RL*RT1*C1*C2*C3
    + R1*RB1*RB2*RL*RT1*C1*C2*C3 + R1*R2*RB1*RL*RT1*C1*C2*C3 + R2*RB1*RB2*RIN*RT1*C1*C2*C3 + R1*R2*RB1*RB2*RT1*C1*C2*C3
    + R1*RB1*RB2*RIN*RL*C1*C2*C3 + R1*R2*RB1*RIN*RL*C1*C2*C3 + R1*R2*RB1*RB2*RL*C1*C2*C3 + R1*R2*RB1*RB2*RIN*C1*C2*C3;

  const denBRe = RB2*RIN*RT1*RT2*C1*C2 + R2*RIN*RT1*RT2*C1*C2 + RB1*RB2*RT1*RT2*C1*C2 + R2*RB2*RT1*RT2*C1*C2
    + R1*RB2*RT1*RT2*C1*C2 + R2*RB1*RT1*RT2*C1*C2 + R1*R2*RT1*RT2*C1*C2 + RB2*RIN*RL*RT2*C1*C2 + R2*RIN*RL*RT2*C1*C2 + RB1*RB2*RL*RT2*C1*C2
    + R2*RB2*RL*RT2*C1*C2 + R1*RB2*RL*RT2*C1*C2 + R2*RB1*RL*RT2*C1*C2 + R1*R2*RL*RT2*C1*C2 + RB1*RB2*RIN*RT2*C1*C2 + R2*RB2*RIN*RT2*C1*C2
    + R1*RB2*RIN*RT2*C1*C2 + R2*RB1*RIN*RT2*C1*C2 + R1*R2*RIN*RT2*C1*C2 + RB2*RIN*RL*RT1*C1*C2 + R2*RIN*RL*RT1*C1*C2 + RB1*RB2*RL*RT1*C1*C2
    + R2*RB2*RL*RT1*C1*C2 + R1*RB2*RL*RT1*C1*C2 + R2*RB1*RL*RT1*C1*C2 + R1*R2*RL*RT1*C1*C2 + RB1*RB2*RIN*RT1*C1*C2 + R2*RB2*RIN*RT1*C1*C2
    + R2*RB1*RIN*RT1*C1*C2 + R1*RB1*RB2*RT1*C1*C2 + R1*R2*RB2*RT1*C1*C2 + R1*R2*RB1*RT1*C1*C2 + R1*RB2*RIN*RL*C1*C2 + R1*R2*RIN*RL*C1*C2
    + R1*RB1*RB2*RL*C1*C2 + R1*R2*RB2*RL*C1*C2 + R1*R2*RB1*RL*C1*C2 + R1*RB1*RB2*RIN*C1*C2 + R1*R2*RB2*RIN*C1*C2 + R1*R2*RB1*RIN*C1*C2
    + RB1*RB2*RIN*RT2*C2*C3 + R2*RB1*RIN*RT2*C2*C3 + R2*RB1*RB2*RT2*C2*C3 + R1*RB1*RB2*RT2*C2*C3 + R1*R2*RB1*RT2*C2*C3 + RB1*RB2*RIN*RL*C2*C3
    + R2*RB1*RIN*RL*C2*C3 + R2*RB1*RB2*RL*C2*C3 + R1*RB1*RB2*RL*C2*C3 + R1*R2*RB1*RL*C2*C3 + R2*RB1*RB2*RIN*C2*C3 + R1*R2*RB1*RB2*C2*C3
    + RB2*RIN*RT1*RT2*C1*C3 + R2*RIN*RT1*RT2*C1*C3 + R2*RB2*RT1*RT2*C1*C3 + R1*RB2*RT1*RT2*C1*C3 + R1*R2*RT1*RT2*C1*C3 + RB2*RIN*RL*RT2*C1*C3
    + R2*RIN*RL*RT2*C1*C3 + R2*RB2*RL*RT2*C1*C3 + R1*RB2*RL*RT2*C1*C3 + R1*R2*RL*RT2*C1*C3 + R2*RB2*RIN*RT2*C1*C3 + R1*RB2*RIN*RT2*C1*C3
    + R1*R2*RIN*RT2*C1*C3 + RB2*RIN*RL*RT1*C1*C3 + R2*RIN*RL*RT1*C1*C3 + R2*RB2*RL*RT1*C1*C3 + R1*RB2*RL*RT1*C1*C3 + R1*R2*RL*RT1*C1*C3
    + RB1*RB2*RIN*RT1*C1*C3 + R2*RB2*RIN*RT1*C1*C3 + R2*RB1*RIN*RT1*C1*C3 + R2*RB1*RB2*RT1*C1*C3 + R1*RB1*RB2*RT1*C1*C3 + R1*R2*RB2*RT1*C1*C3
    + R1*R2*RB1*RT1*C1*C3 + RB1*RB2*RIN*RL*C1*C3 + R1*RB2*RIN*RL*C1*C3 + R2*RB1*RIN*RL*C1*C3 + R1*R2*RIN*RL*C1*C3 + R2*RB1*RB2*RL*C1*C3
    + R1*RB1*RB2*RL*C1*C3 + R1*R2*RB2*RL*C1*C3 + R1*R2*RB1*RL*C1*C3 + R2*RB1*RB2*RIN*C1*C3 + R1*RB1*RB2*RIN*C1*C3 + R1*R2*RB2*RIN*C1*C3
    + R1*R2*RB1*RIN*C1*C3;

  const denCIm = RB2*RIN*RT2*C2 + R2*RIN*RT2*C2 + RB1*RB2*RT2*C2 + R2*RB2*RT2*C2
    + R1*RB2*RT2*C2 + R2*RB1*RT2*C2 + R1*R2*RT2*C2 + RB2*RIN*RL*C2 + R2*RIN*RL*C2 + RB1*RB2*RL*C2 + R2*RB2*RL*C2 + R1*RB2*RL*C2
    + R2*RB1*RL*C2 + R1*R2*RL*C2 + RB1*RB2*RIN*C2 + R2*RB2*RIN*C2 + R2*RB1*RIN*C2 + R1*RB1*RB2*C2 + R1*R2*RB2*C2 + R1*R2*RB1*C2
    + RB2*RT1*RT2*C1 + R2*RT1*RT2*C1 + RB2*RL*RT2*C1 + R2*RL*RT2*C1 + RB2*RIN*RT2*C1 + R2*RIN*RT2*C1 + RB2*RL*RT1*C1 + R2*RL*RT1*C1
    + RB1*RB2*RT1*C1 + R2*RB2*RT1*C1 + R2*RB1*RT1*C1 + RB2*RIN*RL*C1 + R2*RIN*RL*C1 + RB1*RB2*RL*C1 + R2*RB2*RL*C1 + R2*RB1*RL*C1
    + RB1*RB2*RIN*C1 + R2*RB2*RIN*C1 + R2*RB1*RIN*C1 + RB2*RIN*RT2*C3 + R2*RIN*RT2*C3 + R2*RB2*RT2*C3
    + R1*RB2*RT2*C3 + R1*R2*RT2*C3 + RB2*RIN*RL*C3 + R2*RIN*RL*C3 + R2*RB2*RL*C3 + R1*RB2*RL*C3 + R1*R2*RL*C3 + RB1*RB2*RIN*C3
    + R2*RB2*RIN*C3 + R2*RB1*RIN*C3 + R2*RB1*RB2*C3 + R1*RB1*RB2*C3 + R1*R2*RB2*C3 + R1*R2*RB1*C3;

  const denDRe = RB2*RT2 + R2*RT2 + RB2*RL + R2*RL + RB1*RB2 + R2*RB2 + R2*RB1;

  // Transfer function numerator coefficients
  const numAIm = C1*C2*C3*R2*RB1*RB2*RL*RT2 + C1*C2*C3*R1*RB1*RB2*RL*RT2
    + C1*C2*C3*R1*R2*RB1*RL*RT2 + C1*C2*C3*R2*RB1*RB2*RL*RT1
    + C1*C2*C3*R1*R2*RB1*RB2*RL;

  const numBRe = C1*C2*RB1*RB2*RL*RT2 + C1*C3*R2*RB2*RL*RT2 + C1*C2*R2*RB2*RL*RT2
    + C1*C3*R1*RB2*RL*RT2 + C1*C2*R1*RB2*RL*RT2 + C1*C2*R2*RB1*RL*RT2
    + C1*C3*R1*R2*RL*RT2 + C1*C2*R1*R2*RL*RT2 + C1*C2*RB1*RB2*RL*RT1
    + C1*C3*R2*RB2*RL*RT1 + C1*C2*R2*RB2*RL*RT1 + C1*C2*R2*RB1*RL*RT1
    + C2*C3*R2*RB1*RB2*RL + C1*C3*R2*RB1*RB2*RL + C1*C3*R1*RB1*RB2*RL
    + C1*C2*R1*RB1*RB2*RL + C1*C3*R1*R2*RB2*RL + C1*C2*R1*R2*RB2*RL
    + C1*C3*R1*R2*RB1*RL + C1*C2*R1*R2*RB1*RL;

  const numCIm = C1*RB2*RL*RT2 + C1*R2*RL*RT2 + C2*RB1*RB2*RL + C1*RB1*RB2*RL
    + C3*R2*RB2*RL + C2*R2*RB2*RL + C1*R2*RB2*RL + C2*R2*RB1*RL + C1*R2*RB1*RL;

  const numDRe = 0;

  return [
    [numDRe, numCIm, numBRe, numAIm],
    [denDRe, denCIm, denBRe, denAIm]
  ];
});