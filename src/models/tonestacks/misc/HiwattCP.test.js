import { HiwattCP } from './HiwattCP';
import { testTonestack } from '../_testTonestack';

testTonestack(HiwattCP, function (controlValues) {
  const {
    RIN, R1, R2, RL, C1, C2, C3,
    RT: [RT2, RT1],      
    RB: [RB2, RB1]
  } = this.processComponentValues(controlValues);

  const a0 = 0;
  const a1 = C1*R2*RB1*RL + C1*R2*RB2*RL + C1*RB1*RB2*RL;
  const a2 = C2*C1*R1*R2*RB1*RL + C2*C1*R1*R2*RB2*RL + C2*C1*R1*RB1*RB2*RL + C3*C1*R2*RB1*RB2*RL + C2*C1*R2*RB1*RL*RT1 + C2*C1*R2*RB2*RL*RT1 + C2*C1*RB1*RB2*RL*RT1 + C2*C1*R1*R2*RL*RT2 + C2*C1*R1*RB1*RL*RT2 + C2*C1*R2*RB1*RL*RT2 + C2*C1*R2*RB2*RL*RT2 + C2*C1*RB1*RB2*RL*RT2;
  const a3 = C2*C3*C1*R1*R2*RB1*RB2*RL + C2*C3*C1*R2*RB1*RB2*RL*RT1 + C2*C3*C1*R1*R2*RB2*RL*RT2 + C2*C3*C1*R1*RB1*RB2*RL*RT2 + C2*C3*C1*R2*RB1*RB2*RL*RT2;

  const b0 = R2*RB1 + R2*RB2 + RB1*RB2 + R2*RL + RB1*RL + R2*RT2 + RB1*RT2;
  const b1 = C2*R1*R2*RB1 + C1*R1*R2*RB1 + C2*R1*R2*RB2 + C1*R1*R2*RB2 + C2*R1*RB1*RB2 + C1*R1*RB1*RB2 + C3*R2*RB1*RB2 + C1*R2*RB1*RIN + C1*R2*RB2*RIN + C1*RB1*RB2*RIN + C2*R1*R2*RL + C1*R1*R2*RL + C2*R1*RB1*RL + C1*R1*RB1*RL + C1*R2*RB1*RL + C3*R2*RB2*RL + C1*R2*RB2*RL + C3*RB1*RB2*RL + C1*RB1*RB2*RL + C1*R2*RIN*RL + C1*RB1*RIN*RL + C2*R2*RB1*RT1 + C2*R2*RB2*RT1 + C2*RB1*RB2*RT1 + C2*R2*RL*RT1 + C2*RB1*RL*RT1 + C2*R1*R2*RT2 + C1*R1*R2*RT2 + C2*R1*RB1*RT2 + C1*R1*RB1*RT2 + C2*R2*RB1*RT2 + C1*R2*RB1*RT2 + C2*R2*RB2*RT2 + C3*R2*RB2*RT2 + C1*R2*RB2*RT2 + C2*RB1*RB2*RT2 + C3*RB1*RB2*RT2 + C1*RB1*RB2*RT2 + C1*R2*RIN*RT2 + C1*RB1*RIN*RT2 + C2*R2*RL*RT2 + C2*RB1*RL*RT2 + C2*R2*RT1*RT2 + C2*RB1*RT1*RT2;
  const b2 = C2*C3*R1*R2*RB1*RB2 + C3*C1*R1*R2*RB1*RB2 + C2*C1*R1*R2*RB1*RIN + C2*C1*R1*R2*RB2*RIN + C2*C1*R1*RB1*RB2*RIN + C3*C1*R2*RB1*RB2*RIN + C2*C1*R1*R2*RB1*RL + C2*C3*R1*R2*RB2*RL + C2*C1*R1*R2*RB2*RL + C3*C1*R1*R2*RB2*RL + C2*C3*R1*RB1*RB2*RL + C2*C1*R1*RB1*RB2*RL + C3*C1*R1*RB1*RB2*RL + C3*C1*R2*RB1*RB2*RL + C2*C1*R1*R2*RIN*RL + C2*C1*R1*RB1*RIN*RL + C3*C1*R2*RB2*RIN*RL + C3*C1*RB1*RB2*RIN*RL + C2*C1*R1*R2*RB1*RT1 + C2*C1*R1*R2*RB2*RT1 + C2*C1*R1*RB1*RB2*RT1 + C2*C3*R2*RB1*RB2*RT1 + C2*C1*R2*RB1*RIN*RT1 + C2*C1*R2*RB2*RIN*RT1 + C2*C1*RB1*RB2*RIN*RT1 + C2*C1*R1*R2*RL*RT1 + C2*C1*R1*RB1*RL*RT1 + C2*C1*R2*RB1*RL*RT1 + C2*C3*R2*RB2*RL*RT1 + C2*C1*R2*RB2*RL*RT1 + C2*C3*RB1*RB2*RL*RT1 + C2*C1*RB1*RB2*RL*RT1 + C2*C1*R2*RIN*RL*RT1 + C2*C1*RB1*RIN*RL*RT1 + C2*C3*R1*R2*RB2*RT2 + C3*C1*R1*R2*RB2*RT2 + C2*C3*R1*RB1*RB2*RT2 + C3*C1*R1*RB1*RB2*RT2 + C2*C3*R2*RB1*RB2*RT2 + C3*C1*R2*RB1*RB2*RT2 + C2*C1*R1*R2*RIN*RT2 + C2*C1*R1*RB1*RIN*RT2 + C2*C1*R2*RB1*RIN*RT2 + C2*C1*R2*RB2*RIN*RT2 + C3*C1*R2*RB2*RIN*RT2 + C2*C1*RB1*RB2*RIN*RT2 + C3*C1*RB1*RB2*RIN*RT2 + C2*C1*R1*R2*RL*RT2 + C2*C1*R1*RB1*RL*RT2 + C2*C1*R2*RB1*RL*RT2 + C2*C3*R2*RB2*RL*RT2 + C2*C1*R2*RB2*RL*RT2 + C2*C3*RB1*RB2*RL*RT2 + C2*C1*RB1*RB2*RL*RT2 + C2*C1*R2*RIN*RL*RT2 + C2*C1*RB1*RIN*RL*RT2 + C2*C1*R1*R2*RT1*RT2 + C2*C1*R1*RB1*RT1*RT2 + C2*C1*R2*RB1*RT1*RT2 + C2*C3*R2*RB2*RT1*RT2 + C2*C1*R2*RB2*RT1*RT2 + C2*C3*RB1*RB2*RT1*RT2 + C2*C1*RB1*RB2*RT1*RT2 + C2*C1*R2*RIN*RT1*RT2 + C2*C1*RB1*RIN*RT1*RT2;
  const b3 = C2*C3*C1*R1*R2*RB1*RB2*RIN + C2*C3*C1*R1*R2*RB1*RB2*RL + C2*C3*C1*R1*R2*RB2*RIN*RL + C2*C3*C1*R1*RB1*RB2*RIN*RL + C2*C3*C1*R1*R2*RB1*RB2*RT1 + C2*C3*C1*R2*RB1*RB2*RIN*RT1 + C2*C3*C1*R1*R2*RB2*RL*RT1 + C2*C3*C1*R1*RB1*RB2*RL*RT1 + C2*C3*C1*R2*RB1*RB2*RL*RT1 + C2*C3*C1*R2*RB2*RIN*RL*RT1 + C2*C3*C1*RB1*RB2*RIN*RL*RT1 + C2*C3*C1*R1*R2*RB2*RIN*RT2 + C2*C3*C1*R1*RB1*RB2*RIN*RT2 + C2*C3*C1*R2*RB1*RB2*RIN*RT2 + C2*C3*C1*R1*R2*RB2*RL*RT2 + C2*C3*C1*R1*RB1*RB2*RL*RT2 + C2*C3*C1*R2*RB1*RB2*RL*RT2 + C2*C3*C1*R2*RB2*RIN*RL*RT2 + C2*C3*C1*RB1*RB2*RIN*RL*RT2 + C2*C3*C1*R1*R2*RB2*RT1*RT2 + C2*C3*C1*R1*RB1*RB2*RT1*RT2 + C2*C3*C1*R2*RB1*RB2*RT1*RT2 + C2*C3*C1*R2*RB2*RIN*RT1*RT2 + C2*C3*C1*RB1*RB2*RIN*RT1*RT2;

return [
    [a0, a1, a2, a3],
    [b0, b1, b2, b3]
  ];
});