import { ProJunior } from './ProJunior';
import { testTonestack } from '../_testTonestack';

testTonestack(ProJunior, function (controlValues) {
  const {
    RIN, R1, R2, R3, RL, C1, C2, C3, C4,
    RT: [RT2, RT1],
    RV: [RV2, RV1],
  } = this.processComponentValues(controlValues);

  // Transfer function denominator coefficients
  const denXRe = C1*C2*C3*C4*R2*RIN*RT1*RT2*RV1*RV2 + C1*C2*C3*C4*R1*R2*RT1*RT2*RV1*RV2
    + C1*C2*C3*C4*R2*RIN*RL*RT2*RV1*RV2 + C1*C2*C3*C4*R1*R2*RL*RT2*RV1*RV2
    + C1*C2*C3*C4*R2*R3*RIN*RT2*RV1*RV2 + C1*C2*C3*C4*R1*R2*RIN*RT2*RV1*RV2
    + C1*C2*C3*C4*R1*R2*R3*RT2*RV1*RV2 + C1*C2*C3*C4*R1*R2*RIN*RT1*RV1*RV2
    + C1*C2*C3*C4*R1*R2*RIN*RL*RV1*RV2 + C1*C2*C3*C4*R1*R2*R3*RIN*RV1*RV2
    + C1*C2*C3*C4*R2*RIN*RL*RT1*RT2*RV2 + C1*C2*C3*C4*R1*R2*RL*RT1*RT2*RV2
    + C1*C2*C3*C4*R2*R3*RIN*RT1*RT2*RV2 + C1*C2*C3*C4*R1*R2*RIN*RT1*RT2*RV2
    + C1*C2*C3*C4*R1*R2*R3*RT1*RT2*RV2 + C1*C2*C3*C4*R1*R2*RIN*RL*RT1*RV2
    + C1*C2*C3*C4*R1*R2*R3*RIN*RT1*RV2 + C1*C2*C3*C4*R2*RIN*RL*RT1*RT2*RV1
    + C1*C2*C3*C4*R1*R2*RL*RT1*RT2*RV1 + C1*C2*C3*C4*R2*R3*RIN*RT1*RT2*RV1
    + C1*C2*C3*C4*R1*R2*R3*RT1*RT2*RV1 + C1*C2*C3*C4*R1*R2*RIN*RL*RT2*RV1
    + C1*C2*C3*C4*R1*R2*R3*RIN*RT2*RV1 + C1*C2*C3*C4*R1*R2*RIN*RL*RT1*RV1
    + C1*C2*C3*C4*R1*R2*R3*RIN*RT1*RV1 + C1*C2*C3*C4*R1*R2*RIN*RL*RT1*RT2
    + C1*C2*C3*C4*R1*R2*R3*RIN*RT1*RT2;

  const denAIm = C1*C3*C4*RIN*RT1*RT2*RV1*RV2 + C2*C3*C4*R2*RT1*RT2*RV1*RV2
    + C1*C3*C4*R2*RT1*RT2*RV1*RV2 + C1*C3*C4*R1*RT1*RT2*RV1*RV2
    + C1*C3*C4*RIN*RL*RT2*RV1*RV2 + C2*C3*C4*R2*RL*RT2*RV1*RV2
    + C1*C3*C4*R2*RL*RT2*RV1*RV2 + C1*C3*C4*R1*RL*RT2*RV1*RV2
    + C1*C3*C4*R3*RIN*RT2*RV1*RV2 + C1*C2*C4*R2*RIN*RT2*RV1*RV2
    + C1*C3*C4*R1*RIN*RT2*RV1*RV2 + C2*C3*C4*R2*R3*RT2*RV1*RV2
    + C1*C3*C4*R2*R3*RT2*RV1*RV2 + C1*C3*C4*R1*R3*RT2*RV1*RV2
    + C2*C3*C4*R1*R2*RT2*RV1*RV2 + C1*C3*C4*R1*R2*RT2*RV1*RV2
    + C1*C2*C4*R1*R2*RT2*RV1*RV2 + C1*C2*C3*R2*RIN*RT1*RV1*RV2
    + C1*C3*C4*R1*RIN*RT1*RV1*RV2 + C2*C3*C4*R1*R2*RT1*RV1*RV2
    + C1*C3*C4*R1*R2*RT1*RV1*RV2 + C1*C2*C3*R1*R2*RT1*RV1*RV2
    + C1*C2*C3*R2*RIN*RL*RV1*RV2 + C1*C3*C4*R1*RIN*RL*RV1*RV2
    + C2*C3*C4*R1*R2*RL*RV1*RV2 + C1*C3*C4*R1*R2*RL*RV1*RV2
    + C1*C2*C3*R1*R2*RL*RV1*RV2 + C1*C2*C3*R2*R3*RIN*RV1*RV2
    + C1*C3*C4*R1*R3*RIN*RV1*RV2 + C1*C2*C4*R1*R2*RIN*RV1*RV2
    + C1*C2*C3*R1*R2*RIN*RV1*RV2 + C2*C3*C4*R1*R2*R3*RV1*RV2
    + C1*C3*C4*R1*R2*R3*RV1*RV2 + C1*C2*C3*R1*R2*R3*RV1*RV2
    + C1*C3*C4*RIN*RL*RT1*RT2*RV2 + C2*C3*C4*R2*RL*RT1*RT2*RV2
    + C1*C3*C4*R2*RL*RT1*RT2*RV2 + C1*C3*C4*R1*RL*RT1*RT2*RV2
    + C1*C3*C4*R3*RIN*RT1*RT2*RV2 + C1*C3*C4*R1*RIN*RT1*RT2*RV2
    + C2*C3*C4*R2*R3*RT1*RT2*RV2 + C1*C3*C4*R2*R3*RT1*RT2*RV2
    + C1*C3*C4*R1*R3*RT1*RT2*RV2 + C2*C3*C4*R1*R2*RT1*RT2*RV2
    + C1*C3*C4*R1*R2*RT1*RT2*RV2 + C1*C2*C4*R2*RIN*RL*RT2*RV2
    + C1*C2*C4*R1*R2*RL*RT2*RV2 + C1*C2*C4*R2*R3*RIN*RT2*RV2
    + C1*C2*C4*R1*R2*RIN*RT2*RV2 + C1*C2*C4*R1*R2*R3*RT2*RV2
    + C1*C2*C3*R2*RIN*RL*RT1*RV2 + C1*C3*C4*R1*RIN*RL*RT1*RV2
    + C2*C3*C4*R1*R2*RL*RT1*RV2 + C1*C3*C4*R1*R2*RL*RT1*RV2
    + C1*C2*C3*R1*R2*RL*RT1*RV2 + C1*C2*C3*R2*R3*RIN*RT1*RV2
    + C1*C3*C4*R1*R3*RIN*RT1*RV2 + C1*C2*C3*R1*R2*RIN*RT1*RV2
    + C2*C3*C4*R1*R2*R3*RT1*RV2 + C1*C3*C4*R1*R2*R3*RT1*RV2
    + C1*C2*C3*R1*R2*R3*RT1*RV2 + C1*C2*C4*R1*R2*RIN*RL*RV2
    + C1*C2*C4*R1*R2*R3*RIN*RV2 + C1*C3*C4*RIN*RL*RT1*RT2*RV1
    + C2*C3*C4*R2*RL*RT1*RT2*RV1 + C1*C3*C4*R2*RL*RT1*RT2*RV1
    + C1*C3*C4*R1*RL*RT1*RT2*RV1 + C1*C3*C4*R3*RIN*RT1*RT2*RV1
    + C2*C3*C4*R2*R3*RT1*RT2*RV1 + C1*C3*C4*R2*R3*RT1*RT2*RV1
    + C1*C3*C4*R1*R3*RT1*RT2*RV1 + C1*C2*C4*R2*RIN*RL*RT2*RV1
    + C1*C3*C4*R1*RIN*RL*RT2*RV1 + C2*C3*C4*R1*R2*RL*RT2*RV1
    + C1*C3*C4*R1*R2*RL*RT2*RV1 + C1*C2*C4*R1*R2*RL*RT2*RV1
    + C1*C2*C4*R2*R3*RIN*RT2*RV1 + C1*C3*C4*R1*R3*RIN*RT2*RV1
    + C2*C3*C4*R1*R2*R3*RT2*RV1 + C1*C3*C4*R1*R2*R3*RT2*RV1
    + C1*C2*C4*R1*R2*R3*RT2*RV1 + C1*C2*C3*R2*RIN*RL*RT1*RV1
    + C1*C3*C4*R1*RIN*RL*RT1*RV1 + C2*C3*C4*R1*R2*RL*RT1*RV1
    + C1*C3*C4*R1*R2*RL*RT1*RV1 + C1*C2*C3*R1*R2*RL*RT1*RV1
    + C1*C2*C3*R2*R3*RIN*RT1*RV1 + C1*C3*C4*R1*R3*RIN*RT1*RV1
    + C2*C3*C4*R1*R2*R3*RT1*RV1 + C1*C3*C4*R1*R2*R3*RT1*RV1
    + C1*C2*C3*R1*R2*R3*RT1*RV1 + C1*C2*C4*R1*R2*RIN*RL*RV1
    + C1*C2*C3*R1*R2*RIN*RL*RV1 + C1*C2*C4*R1*R2*R3*RIN*RV1
    + C1*C2*C3*R1*R2*R3*RIN*RV1 + C1*C3*C4*R1*RIN*RL*RT1*RT2
    + C2*C3*C4*R1*R2*RL*RT1*RT2 + C1*C3*C4*R1*R2*RL*RT1*RT2
    + C1*C3*C4*R1*R3*RIN*RT1*RT2 + C2*C3*C4*R1*R2*R3*RT1*RT2
    + C1*C3*C4*R1*R2*R3*RT1*RT2 + C1*C2*C4*R1*R2*RIN*RL*RT2
    + C1*C2*C4*R1*R2*R3*RIN*RT2 + C1*C2*C3*R1*R2*RIN*RL*RT1
    + C1*C2*C3*R1*R2*R3*RIN*RT1;

  const denBRe = C3*C4*RT1*RT2*RV1*RV2 + C3*C4*RL*RT2*RV1*RV2 + C1*C4*RIN*RT2*RV1*RV2
    + C3*C4*R3*RT2*RV1*RV2 + C2*C4*R2*RT2*RV1*RV2 + C1*C4*R2*RT2*RV1*RV2
    + C3*C4*R1*RT2*RV1*RV2 + C1*C4*R1*RT2*RV1*RV2 + C1*C3*RIN*RT1*RV1*RV2
    + C2*C3*R2*RT1*RV1*RV2 + C1*C3*R2*RT1*RV1*RV2 + C3*C4*R1*RT1*RV1*RV2
    + C1*C3*R1*RT1*RV1*RV2 + C1*C3*RIN*RL*RV1*RV2 + C2*C3*R2*RL*RV1*RV2
    + C1*C3*R2*RL*RV1*RV2 + C3*C4*R1*RL*RV1*RV2 + C1*C3*R1*RL*RV1*RV2
    + C1*C3*R3*RIN*RV1*RV2 + C1*C2*R2*RIN*RV1*RV2 + C1*C4*R1*RIN*RV1*RV2
    + C1*C3*R1*RIN*RV1*RV2 + C2*C3*R2*R3*RV1*RV2 + C1*C3*R2*R3*RV1*RV2
    + C3*C4*R1*R3*RV1*RV2 + C1*C3*R1*R3*RV1*RV2 + C2*C4*R1*R2*RV1*RV2
    + C1*C4*R1*R2*RV1*RV2 + C2*C3*R1*R2*RV1*RV2 + C1*C3*R1*R2*RV1*RV2
    + C1*C2*R1*R2*RV1*RV2 + C3*C4*RL*RT1*RT2*RV2 + C3*C4*R3*RT1*RT2*RV2
    + C3*C4*R1*RT1*RT2*RV2 + C1*C4*RIN*RL*RT2*RV2 + C2*C4*R2*RL*RT2*RV2
    + C1*C4*R2*RL*RT2*RV2 + C1*C4*R1*RL*RT2*RV2 + C1*C4*R3*RIN*RT2*RV2
    + C1*C4*R1*RIN*RT2*RV2 + C2*C4*R2*R3*RT2*RV2 + C1*C4*R2*R3*RT2*RV2
    + C1*C4*R1*R3*RT2*RV2 + C2*C4*R1*R2*RT2*RV2 + C1*C4*R1*R2*RT2*RV2
    + C1*C3*RIN*RL*RT1*RV2 + C2*C3*R2*RL*RT1*RV2 + C1*C3*R2*RL*RT1*RV2
    + C3*C4*R1*RL*RT1*RV2 + C1*C3*R1*RL*RT1*RV2 + C1*C3*R3*RIN*RT1*RV2
    + C1*C3*R1*RIN*RT1*RV2 + C2*C3*R2*R3*RT1*RV2 + C1*C3*R2*R3*RT1*RV2
    + C3*C4*R1*R3*RT1*RV2 + C1*C3*R1*R3*RT1*RV2 + C2*C3*R1*R2*RT1*RV2
    + C1*C3*R1*R2*RT1*RV2 + C1*C2*R2*RIN*RL*RV2 + C1*C4*R1*RIN*RL*RV2
    + C2*C4*R1*R2*RL*RV2 + C1*C4*R1*R2*RL*RV2 + C1*C2*R1*R2*RL*RV2
    + C1*C2*R2*R3*RIN*RV2 + C1*C4*R1*R3*RIN*RV2 + C1*C2*R1*R2*RIN*RV2
    + C2*C4*R1*R2*R3*RV2 + C1*C4*R1*R2*R3*RV2 + C1*C2*R1*R2*R3*RV2
    + C3*C4*RL*RT1*RT2*RV1 + C3*C4*R3*RT1*RT2*RV1 + C1*C4*RIN*RL*RT2*RV1
    + C2*C4*R2*RL*RT2*RV1 + C1*C4*R2*RL*RT2*RV1 + C3*C4*R1*RL*RT2*RV1
    + C1*C4*R1*RL*RT2*RV1 + C1*C4*R3*RIN*RT2*RV1 + C2*C4*R2*R3*RT2*RV1
    + C1*C4*R2*R3*RT2*RV1 + C3*C4*R1*R3*RT2*RV1 + C1*C4*R1*R3*RT2*RV1
    + C1*C3*RIN*RL*RT1*RV1 + C2*C3*R2*RL*RT1*RV1 + C1*C3*R2*RL*RT1*RV1
    + C3*C4*R1*RL*RT1*RV1 + C1*C3*R1*RL*RT1*RV1 + C1*C3*R3*RIN*RT1*RV1
    + C2*C3*R2*R3*RT1*RV1 + C1*C3*R2*R3*RT1*RV1 + C3*C4*R1*R3*RT1*RV1
    + C1*C3*R1*R3*RT1*RV1 + C1*C2*R2*RIN*RL*RV1 + C1*C4*R1*RIN*RL*RV1
    + C1*C3*R1*RIN*RL*RV1 + C2*C4*R1*R2*RL*RV1 + C1*C4*R1*R2*RL*RV1
    + C2*C3*R1*R2*RL*RV1 + C1*C3*R1*R2*RL*RV1 + C1*C2*R1*R2*RL*RV1
    + C1*C2*R2*R3*RIN*RV1 + C1*C4*R1*R3*RIN*RV1 + C1*C3*R1*R3*RIN*RV1
    + C2*C4*R1*R2*R3*RV1 + C1*C4*R1*R2*R3*RV1 + C2*C3*R1*R2*R3*RV1
    + C1*C3*R1*R2*R3*RV1 + C1*C2*R1*R2*R3*RV1 + C3*C4*R1*RL*RT1*RT2
    + C3*C4*R1*R3*RT1*RT2 + C1*C4*R1*RIN*RL*RT2 + C2*C4*R1*R2*RL*RT2
    + C1*C4*R1*R2*RL*RT2 + C1*C4*R1*R3*RIN*RT2 + C2*C4*R1*R2*R3*RT2
    + C1*C4*R1*R2*R3*RT2 + C1*C3*R1*RIN*RL*RT1 + C2*C3*R1*R2*RL*RT1
    + C1*C3*R1*R2*RL*RT1 + C1*C3*R1*R3*RIN*RT1 + C2*C3*R1*R2*R3*RT1
    + C1*C3*R1*R2*R3*RT1 + C1*C2*R1*R2*RIN*RL + C1*C2*R1*R2*R3*RIN;

  const denCIm = C4*RT2*RV1*RV2 + C3*RT1*RV1*RV2 + C3*RL*RV1*RV2 + C1*RIN*RV1*RV2
    + C3*R3*RV1*RV2 + C2*R2*RV1*RV2 + C1*R2*RV1*RV2 + C4*R1*RV1*RV2
    + C3*R1*RV1*RV2 + C1*R1*RV1*RV2 + C4*RL*RT2*RV2 + C4*R3*RT2*RV2
    + C4*R1*RT2*RV2 + C3*RL*RT1*RV2 + C3*R3*RT1*RV2 + C3*R1*RT1*RV2
    + C1*RIN*RL*RV2 + C2*R2*RL*RV2 + C1*R2*RL*RV2 + C4*R1*RL*RV2 + C1*R1*RL*RV2
    + C1*R3*RIN*RV2 + C1*R1*RIN*RV2 + C2*R2*R3*RV2 + C1*R2*R3*RV2 + C4*R1*R3*RV2
    + C1*R1*R3*RV2 + C2*R1*R2*RV2 + C1*R1*R2*RV2 + C4*RL*RT2*RV1 + C4*R3*RT2*RV1
    + C3*RL*RT1*RV1 + C3*R3*RT1*RV1 + C1*RIN*RL*RV1 + C2*R2*RL*RV1 + C1*R2*RL*RV1
    + C4*R1*RL*RV1 + C3*R1*RL*RV1 + C1*R1*RL*RV1 + C1*R3*RIN*RV1 + C2*R2*R3*RV1
    + C1*R2*R3*RV1 + C4*R1*R3*RV1 + C3*R1*R3*RV1 + C1*R1*R3*RV1 + C4*R1*RL*RT2
    + C4*R1*R3*RT2 + C3*R1*RL*RT1 + C3*R1*R3*RT1 + C1*R1*RIN*RL + C2*R1*R2*RL
    + C1*R1*R2*RL + C1*R1*R3*RIN + C2*R1*R2*R3 + C1*R1*R2*R3;

  const denDRe = RV1*RV2 + RL*RV2 + R3*RV2 + R1*RV2 + RL*RV1 + R3*RV1 + R1*RL + R1*R3;

  // Transfer function numerator coefficients
  const numXRe = C1*C2*C3*C4*R1*R2*RL*RT2*RV1*RV2 + C1*C2*C3*C4*R1*R2*RL*RT1*RT2*RV2;

  const numAIm = C1*C3*C4*R1*RL*RT2*RV1*RV2 + C1*C2*C3*R1*R2*RL*RV1*RV2
    + C1*C3*C4*R1*RL*RT1*RT2*RV2 + C1*C2*C4*R1*R2*RL*RT2*RV2
    + C1*C2*C3*R1*R2*RL*RT1*RV2;

  const numBRe = C1*C3*R1*RL*RV1*RV2 + C1*C4*R1*RL*RT2*RV2 + C1*C3*R1*RL*RT1*RV2
    + C1*C2*R1*R2*RL*RV2;

  const numCIm = C1*R1*RL*RV2;

  const numDRe = 0;

  return [
    [numDRe, numCIm, numBRe, numAIm, numXRe],
    [denDRe, denCIm, denBRe, denAIm, denXRe]
  ];
});